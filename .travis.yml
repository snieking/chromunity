---
language: generic
jdk: "openjdk8"
node_js: "9.8"

dist: trusty

services:
  - postgresql

before_script:
  - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 762E3157
  - npm i yarn
  - bash rell/install-postgres-10.sh
  - psql -c "create database chromunity;" -U postgres
  - psql -c "create role postchain LOGIN ENCRYPTED PASSWORD 'postchain';" -U postgres
  - psql -c "grant ALL ON DATABASE chromunity TO postchain;" -U postgres

cache:
  pip: true
  directories:
    - node_modules

install:
  - sudo pip install awscli

script:
  - cd rell
  - ./build.sh
  - ./run-dev-node.sh &
  - cd ..
  - npm install
  - npm run coveralls
  - if [ "$TRAVIS_BRANCH" == "dev" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ]; then npm run build-dev; fi
  - if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ]; then npm run build; fi

# Deploy using awscli to enable pruning of removed files
deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket: chrotonomy.com
    skip_cleanup: true
    local_dir: build
    on:
      branch: master
    region: eu-west-1
    cache_control: "max-age=21600"
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket: dev.chrotonomy.com
    skip_cleanup: true
    local_dir: build
    on:
      branch: dev
    region: eu-west-1
    cache_control: "max-age=3600"

after_deploy:
  # Allow `awscli` to make requests to CloudFront.
  - aws configure set preview.cloudfront true
  # Invalidate every object in the targeted distribution.
  - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
