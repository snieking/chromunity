// ------------ Notification operations ------------
class notification {
  key thread, user;
  mutable read: boolean;
  timestamp;
}

operation create_notification(name, thread_id: text, usernames: set<text>) {
  val user = user@{ .name == name};
  require(is_signer(user.pubkey));

  val thread = thread@{ .id == thread_id };
  for (username in usernames) {
    log("Creating notifiaction for username: ", username);
    val toUser = user@{ .name == username };
    create notification(thread, toUser, false, op_context.last_block_time);
  }
}

operation mark_notifications_since_timestamp_read (name, timestamp) {
  val user = user@{ .name == name};
  require(is_signer(user.pubkey));
  update notification @* { .user == user, .timestamp > timestamp } ( read = true );
}

query count_unread_user_notifications(name) {
  val user = user@{ .name == name};
  return notification @* { .user == user, .read == false } (id = .thread.id);
}

query get_all_user_notifications(name) {
  val user = user@{ .name == name};
  return notification @* { .user == user }
    ( threadId=.thread.id, author=.thread.author.name, rootThreadId=.thread.root_thread_id, message=.thread.message, .read, -sort .timestamp);
}

// ------------ Hashtag operations ------------

class thread_tag {
  key name, thread;
}

operation create_thread_tag(username: text, tags: set<text>, thread_id: text) {
  val user = user@{ .name == username};
  require(is_signer(user.pubkey));

  val thread = thread@{ .id == thread_id};
  for(tag in tags) {
    create thread_tag(name = tag, thread);
  }
}

query get_threads_by_tag(tag: text) {
  return thread_tag @* { .name == tag}
    (id=.thread.id, author=.thread.author.name, rootThreadId=.thread.root_thread_id, message=.thread.message, -sort timestamp=.thread.timestamp);
}

query get_all_tags() {
  return thread_tag @* {} (.name);
}

// ------------ Thread operations ------------

class thread {
  key id: text;
  index root_thread_id: text;
  index author: user;
  message: text;
  timestamp;
}

operation create_thread(username: text, id: text, root_thread_id: text, message: text) {
  val user = user@{ .name == username};
  require(is_signer(user.pubkey));
  val time = op_context.last_block_time;
  create thread(id, root_thread_id, user, message, timestamp=time);
}

query get_all_threads() {
  return thread @* {}
    (.id, author=.author.name, rootThreadId=.root_thread_id, .message, -sort .timestamp);
}

query get_sub_threads(root_thread_id: text) {
  return thread@*{.root_thread_id == root_thread_id}
    (.id, author=.author.name, rootThreadId=.root_thread_id, .message, sort .timestamp);
}

query get_threads_by_user_id(name) {
  return thread@*{user@{.name == name}}(
    .id,
    author=.author.name,
    rootThreadId=.root_thread_id,
    .message,
    -sort .timestamp);
}

query get_thread_by_id(id: text) {
  return thread@{.id == id}(.id, author=.author.name, rootThreadId=.root_thread_id, .message);
}

// ------------ Thread Star Rateoperations ------------

class thread_star_rate {
  key id: text, user: user;
}

operation star_rate_thread(username: text, id: text) {
  val user = user@{ .name == username };
  require(is_signer(user.pubkey));
  create thread_star_rate(id, user);
}

operation remove_star_rate_thread(username: text, id: text) {
  val user = user@{ .name == username };
  require(is_signer(user.pubkey));
  delete thread_star_rate @ {.id == id, .user == user};
}

query get_star_rating_for_id(id: text) {
  return thread_star_rate@*{ .id == id }(thread_star_rate.user.name);
}

// ------------ User operations ------------

class admin {
    key user;
}

class user {
  key name;
  index pubkey;
  registered: integer;
}

operation register_user(signerAdmin: pubkey, name, pubkey) {
  if (name == 'admin') {
    require(is_signer(pubkey));
    val newAdmin = create user(name, pubkey, op_context.transaction.block.block_height);
    create admin(newAdmin);
  } else {
    require(is_signer(admin@{.user.pubkey == signerAdmin}.user.pubkey));
    create user(name=name, pubkey, op_context.transaction.block.block_height);
  }
}

query getUser(name) {
  return user@{.name == name}(.name, .pubkey, .registered);
}
