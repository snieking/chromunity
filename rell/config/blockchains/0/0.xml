<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<dict>
    <entry key="blockstrategy">
        <dict>
            <entry key="blockdelay">
                <int>750</int>
            </entry>
            <entry key="maxblocktime">
                <int>15000</int>
            </entry>
            <entry key="maxblocktransactions">
                <int>500</int>
            </entry>
            <entry key="name">
                <string>net.postchain.base.BaseBlockBuildingStrategy</string>
            </entry>
        </dict>
    </entry>
    <entry key="configurationfactory">
        <string>net.postchain.gtx.GTXBlockchainConfigurationFactory</string>
    </entry>
    <entry key="gtx">
        <dict>
            <entry key="modules">
                <array>
                    <string>net.postchain.rell.module.RellPostchainModuleFactory</string>
                    <string>net.postchain.gtx.StandardOpsGTXModule</string>
                </array>
            </entry>
            <entry key="rell">
                <dict>
                    <entry key="modules">
                        <array>
                            <string></string>
                        </array>
                    </entry>
                    <entry key="sources_v0.10">
                        <dict>
                            <entry key="channel/index.rell">
                                <string>import user;
import topic;

entity channel {
    key name, topic.topic;
    index timestamp;
    display_name: name;
}

entity channel_following {
    key user.user, name;
}
</string>
                            </entry>
                            <entry key="channel/operations.rell">
                                <string>import user;

operation follow_channel(username: text, descriptor_id: byte_array, name) {
    val user = user.get_verified_user(username, descriptor_id);
    create channel_following(user, name.lower_case());
}

operation unfollow_channel(username: text, descriptor_id: byte_array, name) {
    val user = user.get_verified_user(username, descriptor_id);
    delete channel_following@{ user, name.lower_case()};
}</string>
                            </entry>
                            <entry key="channel/queries.rell">
                                <string>import user;
import topic;

query get_topics_by_channel_prior_to_timestamp(name, timestamp, page_size: integer) {
    // TODO: .lower_case() in Rell 0.9
    return channel@*{
        .name == name,
        .topic.last_modified &lt; timestamp,
        .topic.removed == false
    } (
        id=.topic.id,
        author=.topic.author.display_name,
        title=.topic.title,
        message=.topic.message,
        timestamp=.topic.timestamp,
        -sort last_modified=.topic.last_modified,
        removed=.topic.removed
    ) limit page_size;
}

query get_topics_by_channel_after_timestamp(name, timestamp) {
    return channel@*{
        .name == name,
        .topic.last_modified &gt; timestamp,
        .topic.removed == false
    } (
        id=.topic.id,
        author=.topic.author.display_name,
        title=.topic.title,
        message=.topic.message,
        timestamp=.topic.timestamp,
        -sort last_modified=.topic.last_modified,
        removed=.topic.removed
    );
}

query count_topics_by_channel(name) {
    return channel@*{ .name == name } ( .name ).size();
}

query count_channel_followers(name) {
    return channel_following@*{ .name == name } ( .user.name ).size();
}

query get_topics_by_followed_channels_prior_to_timestamp(username: text, timestamp, page_size: integer) {
    val user = user.user@{ .name == username};
    return (channel, channel_following) @* {
        channel_following.user == user,
        channel_following.name == channel.name,
        channel.topic.last_modified &lt; timestamp,
        channel.topic.removed == false
    }
    (
        id=channel.topic.id,
        author=channel.topic.author.display_name,
        title=channel.topic.title,
        message=channel.topic.message,
        timestamp=channel.topic.timestamp,
        -sort last_modified=channel.topic.last_modified,
        removed=channel.topic.removed
    ) limit page_size;
}

query get_topics_by_followed_channels_after_timestamp(username: text, timestamp, page_size: integer) {
    val user = user.user@{ .name == username};
    return (channel, channel_following) @* {
        channel_following.user == user,
        channel_following.name == channel.name,
        channel.topic.last_modified &gt; timestamp,
        channel.topic.removed == false
    }
    (
        id=channel.topic.id,
        author=channel.topic.author.display_name,
        title=channel.topic.title,
        message=channel.topic.message,
        timestamp=channel.topic.timestamp,
        -sort last_modified=channel.topic.last_modified,
        removed=channel.topic.removed
    ) limit page_size;
}

query get_followed_channels(username: text) {
    val user = user.user@{ .name == username};
    return channel_following@*{ user } ( .name );
}

query get_all_channels() {
    return channel@*{} ( .display_name );
}

query get_channels_since(timestamp) {
    return channel@*{ .timestamp &gt; timestamp }( .display_name );
}

query get_topic_channels_belongings(topic_id: text) {
    return channel@*{ topic.topic@{ .id == topic_id }} ( .display_name );
}
</string>
                            </entry>
                            <entry key="chat/index.rell">
                                <string>import user;

entity chat {
	key id: text;
	mutable title: text;
	timestamp;
}

entity chat_user {
	key user.user;
	rsa_pubkey: text;
}

entity chat_membership {
	key chat, member: chat_user;
	encrypted_chat_key: text;
	mutable last_opened: timestamp = 0;
}

entity chat_message {
	index chat;
	index sender: chat_user;
	index timestamp;
	encrypted_msg: text;
}

struct chat_record {
	id: text;
	title: text;
	last_message: message_record?;
	encrypted_chat_key: text;
	timestamp;
	last_opened: timestamp;
}

struct message_record {
	sender: name;
	timestamp;
	encrypted_msg: text;
}
</string>
                            </entry>
                            <entry key="chat/operations.rell">
                                <string>import user;
import util;

operation create_chat(chat_id: text, descriptor_id: byte_array, username: text, title: text, encrypted_chat_key: text) {
	val founder = user.get_verified_user(username, descriptor_id);

	val chat = create chat(id = chat_id, title = title, timestamp = op_context.last_block_time);
	create chat_membership(chat, chat_user@{ .user == founder }, encrypted_chat_key);
}

operation create_chat_user(descriptor_id: byte_array, username: text, rsa_pubkey: text) {
	val user = user.get_verified_user(username, descriptor_id);
	create chat_user(user, rsa_pubkey);
}

operation delete_chat_user(descriptor_id: byte_array, username: text) {
	val user = user.get_verified_user(username, descriptor_id);
	val chat_user = chat_user@?{ user };

	if (chat_user != null) {
		delete chat_membership@*{ .member == chat_user };
		delete chat_message@*{ .sender == chat_user };
		delete chat_user;
	}
}

operation add_user_to_chat(descriptor_id: byte_array, username: text, chat_id: text, target_user: text, encrypted_chat_key: text) {
	val user_already_in_chat = user.get_verified_user(username, descriptor_id);
	val chat = chat@{ .id == chat_id };

	if (chat_membership @? { chat, .member.user.name == target_user.lower_case() } == null) {
		create chat_membership(chat, chat_user@{ .user.name == target_user.lower_case() }, encrypted_chat_key);
	}
}

operation leave_chat(descriptor_id: byte_array, username: text, chat_id: text) {
	val user = user.get_verified_user(username, descriptor_id);
	val chat = chat@{ .id == chat_id };

	delete chat_membership@{ chat, chat_user@{ user }};

	if (chat_membership@*{ chat } ( .member ).size() == 0) {
		delete chat_message@*{ chat };
		delete chat;
	}
}

operation modify_chat_title(descriptor_id: byte_array, username: text, chat_id: text, title: text) {
	val user = user.get_verified_user(username, descriptor_id);
	val chat = chat@{ .id == chat_id };
	chat_membership@{ chat, chat_user@{ user }};
	update chat ( title = title );
}

operation send_chat_message(chat_id: text, descriptor_id: byte_array, username: name, encrypted_msg: text) {
	val user = user.get_verified_user(username, descriptor_id);

	val chat = chat@{ .id == chat_id };
	val chat_user = chat_user@{ user };
	val chat_member = chat_membership@?{ chat, chat_user };
	require(chat_member != null, util.app_error(util.error_type.USER_UNAUTHORIZED, "Only a chat member can send a message"));

	create chat_message(chat, chat_user, op_context.last_block_time, encrypted_msg);
}

operation update_last_opened_timestamp(chat_id: text, descriptor_id: byte_array, username: name) {
	val user = user.get_verified_user(username, descriptor_id);
	update chat_membership@{
		.chat.id == chat_id,
		.member.user == user
	} ( last_opened = op_context.last_block_time );
}
</string>
                            </entry>
                            <entry key="chat/queries.rell">
                                <string>import follow;

query get_chat_user_pubkey(username: name): text? {
	return chat_user@?{ .user.name == username.lower_case() } ( .rsa_pubkey );
}

query get_user_chats(username: name): list&lt;chat_record&gt; {

	val member_chats = chat_membership@*{ .member.user.name == username.lower_case() };
	val chat_records = list&lt;chat_record&gt;();

	for (member_chat in member_chats) {
		val latest_message = chat_message@?{ .chat == member_chat.chat } ( .sender, -sort .timestamp, .encrypted_msg, -sort .chat.timestamp ) limit 1;

		if (latest_message != null) {
			val message = message_record(sender = latest_message.sender.user.display_name, timestamp = latest_message.timestamp, encrypted_msg = latest_message.encrypted_msg);
			chat_records.add(chat_record(
				id = member_chat.chat.id,
				title = member_chat.chat.title,
				last_message = message,
				encrypted_chat_key = member_chat.encrypted_chat_key,
				timestamp = member_chat.chat.timestamp,
				last_opened = member_chat.last_opened
			));
		} else {
			chat_records.add(chat_record(
				id = member_chat.chat.id,
				title = member_chat.chat.title,
				last_message = null,
				encrypted_chat_key = member_chat.encrypted_chat_key,
				timestamp = member_chat.chat.timestamp,
				last_opened = member_chat.last_opened
			));
		}

	}

	return chat_records;
}

query get_chat_messages(id: text, prior_to: timestamp, page_size: integer) {
	return chat_message@*{ .chat.id == id, .timestamp &lt; prior_to } (
		sender = chat_message.sender.user.display_name,
		-sort timestamp = chat_message.timestamp,
		encrypted_msg = chat_message.encrypted_msg
	) limit page_size;
}

query get_chat_messages_after(id: text, after_timestamp: timestamp, page_size: integer) {
	return chat_message@*{ .chat.id == id, .timestamp &gt; after_timestamp } (
		sender = chat_message.sender.user.display_name,
		sort timestamp = chat_message.timestamp,
		encrypted_msg = chat_message.encrypted_msg
	) limit page_size;
}

query get_chat_participants(id: text) {
	return chat_membership@*{ .chat.id == id } ( .member.user.display_name );
}

query get_followed_chat_users(username: name) {
	return (chat_user, follow.follow) @* {
		follow.follower.name == username.lower_case(),
		follow.follows == chat_user.user
	} ( chat_user.user.display_name );
}

query get_chat_users() {
	return chat_user @* {} ( chat_user.user.display_name );
}

query count_unread_chats(username: name) {
	return set&lt;chat&gt;((chat_membership, chat_message)@*{
		chat_membership.member.user.name == username,
		chat_message.timestamp &gt; chat_membership.last_opened,
		chat_membership.chat == chat_message.chat
	} ( chat_membership.chat )).size();
}</string>
                            </entry>
                            <entry key="election/index.rell">
                                <string>import user;

entity representative_election {
    key id: text;
    index timestamp;
    mutable completed: boolean;
    index completed;
}

entity representative_election_candidate {
  key representative_election, user.user;
}

entity representative_election_vote {
    key user.user, representative_election_candidate;
}
</string>
                            </entry>
                            <entry key="election/operations.rell">
                                <string>import user;
import representative;

operation trigger_election(admin_user: text, descriptor_id: byte_array, id: text, timestamp) {
    val u = user.get_verified_user(admin_user, descriptor_id);
    user.assert_admin(u);

    val currentElection = representative_election @? { .completed == false };

    if (currentElection == null) {
        create representative_election(id, timestamp, false);
    }
}

operation complete_election(admin_user: text, descriptor_id: byte_array, representatives: set&lt;text&gt;) {
    val op_user = user.get_verified_user(admin_user, descriptor_id);
    user.assert_admin(op_user);

    val currentElection = representative_election @ { .completed == false };
    update currentElection ( completed = true );

    for (representative in representatives) {
        val user = user.user@{ .name == representative };
        create representative.representative(user, currentElection);
    }
}

operation vote_for_candidate(voter: name, descriptor_id: byte_array, candidate: name) {
    val user = user.get_verified_user(voter, descriptor_id);

    val currentElection = representative_election @ { .completed == false };
    create representative_election_vote(
        user,
        representative_election_candidate@{ user.user@{ .name == candidate }, currentElection }
    );
}

operation update_vote_for_candidate(voter: name, descriptor_id: byte_array, candidate: name) {
    val user = user.get_verified_user(voter, descriptor_id);

    val currentElection = representative_election @ { .completed == false };
    val election_candidate = representative_election_candidate@{
        currentElection,
        user.user@{ .name == candidate }
    };

    delete representative_election_vote@?{
        .user == user,
        election_candidate
    };

    create representative_election_vote(
        user,
        representative_election_candidate@{
            .user.name == candidate,
            currentElection
        }
    );
}

operation sign_up_for_election(name, descriptor_id: byte_array) {
    val user = user.get_verified_user(name, descriptor_id);

    val currentElection = representative_election @ { .completed == false };

    create representative_election_candidate(currentElection, user);
}</string>
                            </entry>
                            <entry key="election/queries.rell">
                                <string>import user;

query get_election_votes() {
    return representative_election_vote@*{
        representative_election_candidate@{
            representative_election @ { .completed == false }
        }
    } ( .representative_election_candidate.user.name );
}

query get_election_candidates() {
    return representative_election_candidate@*{
        representative_election @ { .completed == false }
    } ( .user.name );
}

query get_next_election(timestamp) {
    return representative_election@?{ .timestamp &gt; timestamp } ( .id, -sort .timestamp ) limit 1;
}

query get_uncompleted_election() {
    return representative_election@?{
        .completed == false
    } ( .id );
}

query get_user_vote_in_election(name) {
    return representative_election_vote@?{
        .user == user.user@{ .name == name },
        .representative_election_candidate.representative_election == representative_election @ { .completed == false }
    } ( .representative_election_candidate.user.name );
}

query get_current_representative_period(timestamp) {
    return representative_election @? { .timestamp &lt;= timestamp, .completed == true } ( .id, -sort .timestamp ) limit 1;
}
</string>
                            </entry>
                            <entry key="follow/index.rell">
                                <string>import user;

entity follow {
    key follower: user.user, follows: user.user;
}
</string>
                            </entry>
                            <entry key="follow/operations.rell">
                                <string>import user;
import util;

operation create_following(follower: text, descriptor_id: byte_array, follows: text) {
    require(follower != follows, util.app_error(util.error_type.ILLEGAL_ACTION, "Follow another user"));
    val user = user.get_verified_user(follower, descriptor_id);
    create follow(follower = user, follows = user.user@{ .name == follows.lower_case() });
}

operation remove_following(follower: text, descriptor_id: byte_array, follows: text) {
    require(follower != follows);
    val user = user.get_verified_user(follower, descriptor_id);

    delete follow@{ .follower == user, .follows == user.user@{ .name == follows.lower_case() } };
}
</string>
                            </entry>
                            <entry key="follow/queries.rell">
                                <string>import user;

query get_user_followers(name) {
    return follow@*{ .follows == user.user @ { .name == name } }( .follower.name );
}

query get_user_follows(name) {
    return follow@*{ .follower == user.user@{ .name == name } } ( .follows.name );
}
</string>
                            </entry>
                            <entry key="ft3_config.rell">
                                <string>module;

object ft3_config {
  blockchain_name: text = "Chromunity";
  blockchain_website: text = "chromunity.com";
  blockchain_description: text = "Decentralized Reddit";
}
</string>
                            </entry>
                            <entry key="lib/ft3/account/auth_basic.rell">
                                <string>// Auth type:

// "S" - single-sig
// "M" - multi-sig

struct single_sig_args {
       flags: set&lt;text&gt;;
       pubkey;
}

struct multi_sig_args {
       flags: set&lt;text&gt;;
       signatures_required: integer;
       pubkeys: list&lt;pubkey&gt;;
}

function check_single_sig_auth(args: byte_array, participants: list&lt;byte_array&gt;, required_flags: list&lt;text&gt;): boolean {
    require(participants.size() == 1);
    val ss_args = single_sig_args.from_bytes(args);
    return
          ss_args.flags.contains_all(required_flags)
            and
          is_signer(participants[0]);
}

function check_multi_sig_auth(args: byte_array, participants: list&lt;byte_array&gt;, required_flags: list&lt;text&gt;): boolean {
   val multi_sign_args = multi_sig_args.from_bytes(args);
   if (not (multi_sign_args.flags.contains_all(required_flags))) return false;
   var num_sign = multi_sign_args.signatures_required;
   for(s in participants) {
      if(is_signer(s)) {
          num_sign -= 1;
          if(num_sign &lt; 1) {return true;}
      }
   }
   return false;
}

function check_auth_args (a_t: text, args: byte_array, participants: list&lt;byte_array&gt;, required_flags: list&lt;text&gt;): boolean {
    return when (a_t) {
        "S" -&gt; check_single_sig_auth(args, participants, required_flags);
        "M" -&gt; check_multi_sig_auth(args, participants, required_flags);
        else -&gt; false;
    };
}


function require_auth (account, descriptor_id: byte_array, required_flags: list&lt;text&gt;) {
   val account_auth_descriptor = account_auth_descriptor @ {
     account,
     .descriptor_id == descriptor_id
   };
   require(
      check_auth_args(
       account_auth_descriptor.auth_type,
       account_auth_descriptor.args,
       auth_descriptor_participant @* { account_auth_descriptor } ( .id ),
       required_flags
       )
   );
}
</string>
                            </entry>
                            <entry key="lib/ft3/account/module.rell">
                                <string>@mount('ft3')
module;

struct auth_descriptor {
    auth_type: text;
    participants: list&lt;byte_array&gt;;
    args: list&lt;gtv&gt;;
}

entity account {
    key id: byte_array;
}

entity account_meta {
    meta_key: text;
    value: byte_array;
    index account, meta_key;
    index meta_key, value;
}

entity account_auth_descriptor {
     descriptor_id: byte_array;
     key account, descriptor_id;
     index descriptor_id;
     auth_type: text;
     args: byte_array;
}

entity auth_descriptor_participant {
    key account_auth_descriptor, id: byte_array;
}

function _add_auth_descriptor (account, auth_descriptor) {
     val descriptor_id = auth_descriptor.hash();
     val account_auth_descriptor = create account_auth_descriptor (
        account, descriptor_id,
        auth_descriptor.auth_type,
        args = auth_descriptor.args.to_gtv().to_bytes()
     );
     for (participant in auth_descriptor.participants) {
        create auth_descriptor_participant(account_auth_descriptor, id = participant);
     }
}

function create_account_with_auth (auth_descriptor): byte_array {
    print(auth_descriptor);
     val id = auth_descriptor.hash();
     val acc = create account (id);
     _add_auth_descriptor(
        acc, auth_descriptor
     );
     return id;
}

operation delete_auth_descriptor (account_id: byte_array, auth_descriptor_id: byte_array, delete_descriptor_id: byte_array) {
      val account = account @ { .id == account_id };
      require_auth(account, auth_descriptor_id, ["A"]);
      delete account_auth_descriptor @ {
         .account == account,
         .descriptor_id == delete_descriptor_id
      };
}

operation delete_all_auth_descriptors_exclude(account_id: byte_array, auth_descriptor_id: byte_array) {
    val account = account @ { .id == account_id };
    require_auth(account, auth_descriptor_id, ["A"]);

    delete (adp: auth_descriptor_participant, ad: account_auth_descriptor) @* {
        ad.account == account and ad.descriptor_id != auth_descriptor_id and adp.account_auth_descriptor == ad
    };

    delete account_auth_descriptor @* {
       .account == account,
       .descriptor_id != auth_descriptor_id
    };
}

operation add_auth_descriptor (account_id: byte_array, auth_id: byte_array, new_desc: auth_descriptor) {
      val account = account @ { .id == account_id };
      require_auth(account, auth_id, ["A"]);
      _add_auth_descriptor(account, new_desc);
}

query get_account_auth_descriptors(id: byte_array) {
    return account_auth_descriptor @* {
        .account.id == id
    } (
        id = .descriptor_id,
        type = .auth_type,
        args = .args
    );
}

query get_account_by_id(id: byte_array) {
    return account @? { id } ( .id );
}

query get_account_by_auth_descriptor(auth_descriptor) {
    return account @? { .id == auth_descriptor.hash() } ( .id );
}

query get_accounts_by_participant_id(id: byte_array) {
    return auth_descriptor_participant @* { id } ( .account_auth_descriptor.account.id );
}

query get_accounts_by_auth_descriptor_id(descriptor_id: byte_array) {
    return account_auth_descriptor @* { descriptor_id } ( .account.id );
}
</string>
                            </entry>
                            <entry key="lib/ft3/core/asset.rell">
                                <string>import acc: ^.account;

entity asset {
    id: byte_array;
    key id;
    key name;
    issuing_chain_rid: byte_array;
}

entity balance {
    key acc.account, asset;
    mutable amount: integer = 0;
}

function ensure_balance(acc.account, asset): balance {
    val balance = balance @? {asset, account};
    if (balance != null) {
       return balance;
    }
    else return create balance(account, asset, amount = 0);
}

function register_asset (name, issuing_chain_rid: byte_array): asset {
   val id = (name, issuing_chain_rid).hash();
   return create asset (id, name, issuing_chain_rid);
}

function _get_asset_balances(account_id: byte_array): list&lt;(id:byte_array,name:text,amount:integer,chain_id:byte_array)&gt; {
    return balance @* { .account.id == account_id } (
      id = .asset.id,
      name = .asset.name,
      amount = .amount,
      chain_id = .asset.issuing_chain_rid
    );
}

query get_asset_balances(account_id: byte_array) {
    return _get_asset_balances(account_id);
}

query get_asset_balance(account_id: byte_array, asset_id: byte_array) {
    return balance @? {
        .account.id == account_id,
        .asset.id == asset_id
    } (
        id = .asset.id,
        name = .asset.name,
        amount = .amount,
        chain_id = .asset.issuing_chain_rid
    );
}

query get_asset_by_name(name) {
    return asset @* { name } (
        .id,
        .name,
        .issuing_chain_rid
    );
}
</string>
                            </entry>
                            <entry key="lib/ft3/core/blockchain.rell">
                                <string>import ft3_config;

object blockchain {
    mutable name: text = ft3_config.ft3_config.blockchain_name;
    mutable website: text = ft3_config.ft3_config.blockchain_website;
    mutable description: text = ft3_config.ft3_config.blockchain_description;
}

entity linked_chain {
    key chain_rid: byte_array;
}

operation update_blockchain(name, website: text, description: text) {
    blockchain.name = name;
    blockchain.website = website;
    blockchain.description = description;
}

query get_blockchain_info() {
    return (
        name = blockchain.name,
        website = blockchain.website,
        description = blockchain.description
    );
}

operation link_chain(chain_rid: byte_array) {
    create linked_chain(chain_rid);
}

query get_linked_chains() {
    return linked_chain @* {} ( .chain_rid );
}

query is_linked_with_chain(chain_rid: byte_array) {
    return linked_chain @? { chain_rid } != null;
}
</string>
                            </entry>
                            <entry key="lib/ft3/core/dev_op.rell">
                                <string>@mount('ft3')
module;

import ft3: ^^.core;
import acc: ^^.account;

object dev_state {
   mutable allow_dev_ops: boolean = true;
}

function require_dev() {
    require(dev_state.allow_dev_ops);
}

operation dev_register_asset (name, issuing_chain_rid: byte_array, origin_chain_rid: byte_array) {
    require_dev();
    ft3.register_asset(name, issuing_chain_rid);
}

operation dev_give_balance (asset_id: byte_array, account_id: byte_array, amount: integer) {
    require_dev();
    require(amount &gt;= 0);
    ft3.ensure_balance( acc.account @ { account_id }, ft3.asset @ { .id == asset_id } ).amount += amount;
}

operation dev_register_account (acc.auth_descriptor) {
    require_dev();
    acc.create_account_with_auth( auth_descriptor );
}
</string>
                            </entry>
                            <entry key="lib/ft3/core/history.rell">
                                <string>import acc: ^.account;

@log entity payment_history_entry {
    index acc.account, asset;
    delta: integer;

    // helps to locate exact position of payment entry in transaction
    op_index: integer;
    is_input: boolean;
    entry_index: integer;
}

query get_payment_history(account_id: byte_array, after_block: integer) {
    return payment_history_entry @* {
        acc.account @ { account_id },
        .transaction.block.block_height &gt; after_block
    } (
        delta = .delta,
        asset = .asset.name,
        asset_id = .asset.id,
        is_input = .is_input,
        timestamp = .transaction.block.timestamp,
        block_height = .transaction.block.block_height,
        entry_index = .entry_index,
        tx_rid = .transaction.tx_rid,
        tx_data = .transaction.tx_data
    );
}
</string>
                            </entry>
                            <entry key="lib/ft3/core/module.rell">
                                <string>@mount('ft3')
module;
</string>
                            </entry>
                            <entry key="lib/ft3/core/transfer.rell">
                                <string>import acc: ^.account;

struct xfer_input {
   account_id: byte_array;
   asset_id: byte_array;
   auth_descriptor_id: byte_array;
   amount: integer;
   extra: map&lt;text, gtv&gt;;
}

struct xfer_output {
   account_id: byte_array;
   asset_id: byte_array;
   amount: integer;
   extra: map&lt;text, gtv&gt;;
}

function deduct_balance (acc.account, asset, d_amount: integer) {
    val b = balance @ { account, asset };
    require( b.amount &gt;= d_amount, "Balance is too low");
    update b (amount -= d_amount);
}

function consume_input (i: xfer_input, idx: integer, assets: map&lt;asset, integer&gt;): payment_history_entry {
      val asset = asset @ { .id == i.asset_id };
      val account = acc.account @ {.id == i.account_id };
      acc.require_auth( account, i.auth_descriptor_id, ["T"] );
      require( i.amount &gt;= 0, "Amount should be positive." );

      deduct_balance(account, asset, i.amount);
      assets[asset] = i.amount + if (asset in assets) assets[asset] else 0;
      return create payment_history_entry (
        account,
        asset,
        .delta = i.amount,
        .op_index = 500, //op_context ???
        .is_input = true,
        .entry_index = idx
      );
}

function process_transfer_output (o: xfer_output, idx: integer, available_assets: map&lt;asset, integer&gt;): payment_history_entry {
      if (o.extra.contains("reg_auth_desc")) {
          val auth_desc = acc.auth_descriptor.from_gtv(o.extra["reg_auth_desc"]);
          require(o.account_id
           == acc.create_account_with_auth(auth_desc));
      }

      val target_account = acc.account @ { .id == o.account_id };
      val asset = asset @ { .id == o.asset_id };
      require( available_assets[asset] &gt;= o.amount );
      available_assets[asset] -= o.amount;
      require(available_assets[asset] &gt;= 0);
      val balance = ensure_balance(target_account, asset);
      balance.amount += o.amount;

      return create payment_history_entry (
        .account = target_account,
        asset,
        .delta = o.amount,

        .op_index = 500, // something from op_context,
        .is_input = false,
        .entry_index = idx
      );
}

function _transfer (inputs: list&lt;xfer_input&gt;, outputs: list&lt;xfer_output&gt;) {
   val sum_inputs = map&lt;asset, integer&gt;();
   var idx = 0;
   for (i in inputs) {
      consume_input(i, idx, sum_inputs);
      idx += 1;
   }

   idx = 0;
   for (o in outputs) {
      process_transfer_output(o, idx, sum_inputs);
      idx += 1;
   }
}

operation transfer (inputs: list&lt;xfer_input&gt;, outputs: list&lt;xfer_output&gt;) {
    _transfer(inputs, outputs);
}
</string>
                            </entry>
                            <entry key="lib/ft3/crosschain/blockchain.rell">
                                <string>import ft3: ^.core;
import acc: ^.account;

entity asset_origin {
    key ft3.asset;
    origin_chain_rid: byte_array;
}

function blockchain_account_id (blockchain_rid: byte_array): byte_array {
   return ("B", blockchain_rid).hash();
}

function ensure_blockchain_account (blockchain_rid: byte_array): acc.account {
   val blockchain_account_id = blockchain_account_id(blockchain_rid);
   val acc = acc.account @? { .id == blockchain_account_id };
   return if (acc??)  acc
   else create acc.account (id = blockchain_account_id);
}

function get_blockchain_account (blockchain_rid: byte_array): acc.account {
   return acc.account @ { .id == blockchain_account_id(blockchain_rid) };
}
</string>
                            </entry>
                            <entry key="lib/ft3/crosschain/dev.rell">
                                <string>import ft3: ^.core;
import ^.core.dev_op;

operation dev_register_xc_asset (name, issuing_chain_rid: byte_array, origin_chain_rid: byte_array) {
    dev_op.require_dev();
    val asset = ft3.register_asset(name, issuing_chain_rid);
    create asset_origin (asset, origin_chain_rid);
}
</string>
                            </entry>
                            <entry key="lib/ft3/crosschain/module.rell">
                                <string>@mount('ft3.xc')
module;
</string>
                            </entry>
                            <entry key="lib/ft3/crosschain/structures.rell">
                                <string>struct operation_rec {
   name;
   args: list&lt;gtv&gt;;
}

struct transaction_body_rec {
    blockchain_rid: byte_array;
    operations: list&lt;operation_rec&gt;;
    signers: list&lt;gtv&gt;;
}

struct transaction_rec {
   body: transaction_body_rec;
   signatures: list&lt;gtv&gt;;
}

struct transaction_proof {
     tx: virtual&lt;transaction_rec&gt;;
     // block_header: byte_array;
     // merkle_path: virtual&lt;list&lt;byte_array&gt;&gt;;
     // tx_index: integer;
     block_rid: byte_array;
     block_signers: list&lt;byte_array&gt;;
     signatures: list&lt;byte_array&gt;;     
}

function verify_transaction_proof( p: transaction_proof ) {
   // TODO
}</string>
                            </entry>
                            <entry key="lib/ft3/crosschain/transfer.rell">
                                <string>import ft3: ^.core;

struct xc_target {
    account_id: byte_array;
    extra: map&lt;text, gtv&gt;;
}

function add_to_blockchain_balance (blockchain_rid: byte_array, ft3.asset, amount: integer) {
    require( chain_context.blockchain_rid != blockchain_rid ); // cannot add to own account

    val origin_chain_rid = asset_origin @? { asset } .origin_chain_rid;

    if (exists(origin_chain_rid) and (blockchain_rid == origin_chain_rid)) {
       // do nothing. in future we might track origin
    } else {
         val bc_acc = ensure_blockchain_account(blockchain_rid);
         ft3.ensure_balance(bc_acc, asset).amount += amount;
    }
}

operation init_xfer (source: ft3.xfer_input, target: xc_target, hops: list&lt;byte_array&gt;) {
     ft3.consume_input(source, 0, map&lt;ft3.asset, integer&gt;());
     val asset = ft3.asset @ { .id == source.asset_id };
     add_to_blockchain_balance( hops[0], asset, source.amount );
}

struct init_xfer_args {
          source: ft3.xfer_input;
          target: xc_target;
          hops: list&lt;byte_array&gt;;
}

entity applied_transfers { key tx_rid: byte_array; }

operation apply_xfer (
       init_tx_rid: byte_array,
       init_tx: transaction_proof,
       prev_hop: transaction_proof?,
       hop_index: integer
) {
      require(init_tx.tx.hash() == init_tx_rid);
      verify_transaction_proof( init_tx );
      create applied_transfers (init_tx_rid);

      require(init_tx.tx.body.operations[0].name == "ft3.xc.init_xfer");
      val init_args = init_xfer_args.from_gtv(
         init_tx.tx.body.operations[0].args.to_full().to_gtv()
      );
      val my_blockchain_rid = chain_context.blockchain_rid;
      val source = init_args.source;

      require(init_args.hops.size() &gt; hop_index);
      require(init_args.hops[hop_index] == my_blockchain_rid);

      val from_chain_rid: byte_array;

      if (hop_index &gt; 0) {
         from_chain_rid = init_args.hops[hop_index - 1];

         require(prev_hop);
         verify_transaction_proof(prev_hop);
         require(prev_hop.tx.body.blockchain_rid == from_chain_rid);
         require(prev_hop.tx.body.operations[0].name == "ft3.xc.apply_xfer");
         require(byte_array.from_gtv(prev_hop.tx.body.operations[0].args[0])
              == init_tx_rid);
      } else {
         from_chain_rid = init_tx.tx.body.blockchain_rid;
      }

      val asset = ft3.asset @ { .id == source.asset_id };
      val origin_chain_rid = asset_origin @ { asset } .origin_chain_rid;

      // process "from" side
      if (from_chain_rid == origin_chain_rid) {
         // asset comes from origin -- do nothing
      } else {
         ft3.deduct_balance(
             get_blockchain_account( from_chain_rid ),
             asset, source.amount
         );
      }

      // process "to" side
      if (init_args.hops.size() &gt; hop_index + 1) {
         // this hop is not last
         val next_hop = init_args.hops[hop_index + 1];
         add_to_blockchain_balance(next_hop, asset, source.amount);
      } else {
         // final hop -- send money to recipient account
         val available_assets = map&lt;ft3.asset, integer&gt;();
         available_assets[asset] = source.amount;
         val target = init_args.target;
         ft3.process_transfer_output(
                ft3.xfer_output(
                  account_id = target.account_id,
                  asset_id = source.asset_id,
                  amount = source.amount,
                  extra = target.extra
                ),
                0,
                available_assets
         );
      }
}
</string>
                            </entry>
                            <entry key="lib/ft3/ft3_xc_basic_dev.rell">
                                <string>module;

import ^.core;
import ^.core.dev_op;
import ^.crosschain;
</string>
                            </entry>
                            <entry key="main.rell">
                                <string>import ft3_config;
import lib.ft3.ft3_xc_basic_dev;

import user;
import topic;
import notifications;
import channel;
import follow;
import election;
import representative;
import chat;</string>
                            </entry>
                            <entry key="notifications/index.rell">
                                <string>import user;

entity notification {
    key id: text, user.user;
    trigger: text;
    content: text;
    mutable read: boolean;
    index timestamp;
}
</string>
                            </entry>
                            <entry key="notifications/operations.rell">
                                <string>import user;

operation create_notifications_for_users(name, descriptor_id: byte_array, id: text, trigger: text, content: text, usernames: set&lt;text&gt;) {
    val user = user.get_verified_user(name, descriptor_id);

    for (username in usernames) {
        val toUser = user.user@?{ .name == username.lower_case() };
        if (toUser != null) {
            create notification(
                id = id,
                toUser,
                trigger = trigger,
                content = content,
                false,
                op_context.last_block_time
            );
        }
    }
}

operation remove_notifications_for_users(name, descriptor_id: byte_array, id: text, usernames: set&lt;text&gt;) {
    val user = user.get_verified_user(name, descriptor_id);

    for (username in usernames) {
        val to_user = user.user@?{ .name == username };
        if (to_user != null) {
            delete notification@?{ id, .user == to_user };
        }
    }
}

operation mark_notifications_since_timestamp_read(name, descriptor_id: byte_array, timestamp) {
    val user = user.get_verified_user(name, descriptor_id);
    update notification@*{ .user == user, .timestamp &gt; timestamp } ( read = true );
}</string>
                            </entry>
                            <entry key="notifications/queries.rell">
                                <string>import user;

query count_unread_user_notifications(name) {
    val user = user.user@{ .name == name };
    return notification@*{ .user == user, .read == false } ( .id );
}

query get_user_notifications_prior_to_timestamp(name, timestamp, page_size: integer) {
    val user = user.user@{ .name == name };
    return notification@*{ .user == user, .timestamp &lt; timestamp } (
        .id,
        .trigger,
        .content,
        .read,
        -sort .timestamp
    ) limit page_size;
}
</string>
                            </entry>
                            <entry key="representative/index.rell">
                                <string>import election;
import user;

entity representative {
    key user.user, election.representative_election;
}

entity representative_action {
    key id: byte_array;
    index representative;
    index timestamp;
    action: text;
}

import representative.report;
</string>
                            </entry>
                            <entry key="representative/operations.rell">
                                <string>import election;
import topic;
import user;
import user.meta;
import util;

operation remove_topic(username: text, descriptor_id: byte_array, topic_id: text) {
    val user = user.get_verified_user(username, descriptor_id);

    val recentElection = election.representative_election@{ .completed == true } ( .id, sort .timestamp );
    val representative = representative @{ user, .representative_election.id == recentElection.id };

    val topic = topic.topic @{ .id == topic_id };
    update topic ( title = "[Removed]", message = "Removed by @" + user.name, removed = true );

    create representative_action(
        id = op_context.transaction.tx_rid,
        representative,
        op_context.last_block_time,
        action = "Topic /t/" + topic.id + " was removed by @" + user.name
    );
}

operation remove_topic_reply(username: text, descriptor_id: byte_array, topic_reply_id: text) {
    val user = user.get_verified_user(username, descriptor_id);

    val recentElection = election.representative_election@{ .completed == true } ( .id, sort .timestamp );
    val representative = representative @{ user, .representative_election.id == recentElection.id };

    val reply = topic.topic_reply @{ .id == topic_reply_id };
    update reply ( message = "Removed by @" + user.name, removed = true );

    create representative_action(
        id = op_context.transaction.tx_rid,
        representative,
        op_context.last_block_time,
        action = "Reply in topic /t/" + reply.topic.id + " was removed by @" + user.name
    );
}

operation suspend_user(username: text, descriptor_id: byte_array, user_to_be_suspended: text) {
    val user = user.get_verified_user(username, descriptor_id);

    val recentElection = election.representative_election@{ .completed == true } ( .id, sort .timestamp );
    val representative = representative @{ user, .representative_election.id == recentElection.id };

    val suspendee = user.user@{ .name == user_to_be_suspended };
    val suspendee_meta = meta.user_meta@{ suspendee };

    require(
    	suspendee_meta.suspended_until &lt; op_context.last_block_time,
    	util.app_error(util.error_type.REPRESENTATIVE_ALREADY_SUSPENDED, "Suspend user")
    );

    val updatedTimesSuspended = suspendee_meta.times_suspended + 1;
    val oneDayMillis = 86400000;
    val daysSuspended = updatedTimesSuspended * updatedTimesSuspended;
    val suspensionTimeMillis = daysSuspended * oneDayMillis;

    update suspendee_meta (
        suspended_until = op_context.last_block_time + suspensionTimeMillis,
        times_suspended = updatedTimesSuspended
    );

    var daysString = " days ";
    if (daysSuspended == 1) {
        daysString = " day ";
    }

    create representative_action(
        id = op_context.transaction.tx_rid,
        representative,
        op_context.last_block_time,
        action = "@" + suspendee.display_name + " was suspended for " + daysSuspended + daysString +  "by @" + user.display_name
    );
}

operation tmp_add_representative(admin_name: name, descriptor_id: byte_array, name) {
    val admin_user = user.get_verified_user(admin_name, descriptor_id);
    user.admin@{ admin_user };

    val currentElection = election.representative_election @ { .timestamp &lt;= op_context.last_block_time, .completed == true } (
        .id,
        -sort .timestamp
    ) limit 1;

    create representative(user.user@{ .name == name }, election.representative_election@{ .id == currentElection.id });
}

operation tmp_remove_representative(admin_name: name, descriptor_id: byte_array, name) {
    val admin_user = user.get_verified_user(admin_name, descriptor_id);
    user.admin@{ admin_user };

    val currentElection = election.representative_election @ { .timestamp &lt;= op_context.last_block_time, .completed == true } (
        .id,
        -sort .timestamp
    ) limit 1;

    delete representative @?{ user.user@{ .name == name }, election.representative_election@{ .id == currentElection.id }};
}</string>
                            </entry>
                            <entry key="representative/queries.rell">
                                <string>import election;

query get_representatives() {
    val election = election.representative_election@?{ .completed == true } ( .id, -sort .timestamp ) limit 1;

    // If no election yes, then admin is technically the only representative
    if (election == null) {
        return ["admin"];
    }

    return representative@*{
        .representative_election.id == election.id
    } ( .user.name );
}

query get_all_representative_actions(timestamp, page_size: integer) {
    return representative_action@*{
        .timestamp &lt; timestamp
    } (
        .id,
        representative = .representative.user.name,
        -sort .timestamp,
        .action
    ) limit page_size;
}

query get_number_of_times_representative(name) {
    return representative@*{ .user.name == name } ( .representative_election.id ).size();
}</string>
                            </entry>
                            <entry key="representative/report/index.rell">
                                <string>import user;

entity representative_report {
    key id: text;
    index user.user;
    index timestamp;
    mutable handled: boolean;
    index handled;
    text;
}
</string>
                            </entry>
                            <entry key="representative/report/operations.rell">
                                <string>import election;
import user;
import user.meta;
import representative;

operation create_representative_report(username: text, descriptor_id: byte_array, id: text, text) {
    val user = user.get_verified_user(username, descriptor_id);
    require(meta.user_meta@{ user }.suspended_until &lt; op_context.last_block_time);

    create representative_report(id= id, user, op_context.last_block_time, false, text = text);
}

operation handle_representative_report(username: text, descriptor_id: byte_array, id: text) {
    val user = user.get_verified_user(username, descriptor_id);

    val recentElection = election.representative_election@{ .completed == true } ( .id, sort .timestamp );
    val representative = representative.representative @{ user, .representative_election.id == recentElection.id };

    val report = representative_report@{ .id == id };
    update report ( handled = true );

    create representative.representative_action(
        id = op_context.transaction.tx_rid,
        representative,
        op_context.last_block_time,
        action = "Report: '" + report.text + "' was handled by @" + user.name
    );
}
</string>
                            </entry>
                            <entry key="representative/report/queries.rell">
                                <string>query get_unhandled_representative_reports() {
    return representative_report@*{ .handled == false } ( .id, user = .user.name, -sort .timestamp, .handled, .text );
}</string>
                            </entry>
                            <entry key="topic/functions.rell">
                                <string>import util;

function find_topic_by_id(id: text): topic {
    return topic@{ .id == id };
}

function require_mutable(post_timestamp: timestamp, op_timestamp: timestamp, action: text) {
	val fiveMinutesInMillis = 300000;
    require(
    	op_timestamp &lt; post_timestamp + fiveMinutesInMillis,
    	util.app_error(util.error_type.TOPIC_IMMUTABLE, action)
    );
}
</string>
                            </entry>
                            <entry key="topic/index.rell">
                                <string>import user;

entity topic {
    key id: text;
    index author: user.user;
    timestamp;
    mutable last_modified: timestamp;
    index last_modified;
    mutable title: name;
    mutable message: text;
    mutable removed: boolean = false;
    index removed;
}

entity topic_reply {
    key id: text;
    index topic;
    index author: user.user;
    index timestamp;
    is_sub_reply: boolean = false;
    index is_sub_reply;
    mutable message: text;
    mutable removed: boolean = false;
}

entity sub_reply {
    key parent_reply: topic_reply, child_reply: topic_reply;
}

import topic.rating;
import topic.subscription;
</string>
                            </entry>
                            <entry key="topic/operations.rell">
                                <string>import channel;
import topic.rating;
import user;

operation create_topic(id: text, descriptor_id: byte_array, username: text, channel_key: name, channel_name: name, title: name, message: text) {
    val author = user.get_verified_user(username, descriptor_id);

    val topic = create topic(
        id = id,
        author,
        timestamp = op_context.last_block_time,
        last_modified = op_context.last_block_time,
        title = title,
        message = message
    );

    create channel.channel(name = channel_key.lower_case(), topic, op_context.last_block_time, display_name = channel_name);
    create rating.tmp_topic_rating (topic, 0);
}

operation modify_topic(id: text, descriptor_id: byte_array, username: text, text) {
    val author = user.get_verified_user(username, descriptor_id);

    val topic = topic@{ .id == id, .author == author };
    require_mutable(topic.timestamp, op_context.last_block_time, "Modify topic");

    update topic ( message = text );
}

operation delete_topic(id: text, descriptor_id: byte_array, username: text) {
     val author = user.get_verified_user(username, descriptor_id);

     val topic = topic@{ .id == id, .author == author };
     require_mutable(topic.timestamp, op_context.last_block_time, "Delete topic");

     update topic ( removed = true, message = "Deleted by @" + username );
}

operation create_reply(topic_id: text, descriptor_id: byte_array, id: text, username: text, message: text) {
    val author = user.get_verified_user(username, descriptor_id);
    val topic = find_topic_by_id(topic_id);

    create topic_reply(
        id = id,
        topic,
        author,
        timestamp = op_context.last_block_time,
        message = message
    );

    if (not topic.removed) {
        update topic ( last_modified = op_context.last_block_time);
    }
}

operation modify_reply(id: text, descriptor_id: byte_array, username: text, text) {
    val author = user.get_verified_user(username, descriptor_id);

    val reply = topic_reply@{ .id == id, .author == author };
    require_mutable(reply.timestamp, op_context.last_block_time, "Modify reply");

    update reply ( message = text );
}

operation create_sub_reply(topic_id: text, descriptor_id: byte_array, parent_reply_id: text, id: text, username: text, message: text) {
    val author = user.get_verified_user(username, descriptor_id);
    val topic = find_topic_by_id(topic_id);

    val topic_reply = create topic_reply(
        id = id,
        topic,
        author,
        timestamp = op_context.last_block_time,
        is_sub_reply = true,
        message = message
    );

    create sub_reply(
        parent_reply = topic_reply@{ .id == parent_reply_id },
        child_reply = topic_reply
    );

    if (not topic.removed) {
        update topic ( last_modified = op_context.last_block_time);
    }
}</string>
                            </entry>
                            <entry key="topic/queries.rell">
                                <string>import channel;
import follow;
import topic.rating;
import user;

query get_topics_after_timestamp(timestamp, page_size: integer) {
    return topic @* {
        .last_modified &gt; timestamp,
        .removed == false
    }(
        .id,
        author=.author.display_name,
        .title,
        .message,
        -sort .last_modified,
        .removed,
        .timestamp
    ) limit page_size;
}

query get_topics_prior_to_timestamp(timestamp, page_size: integer) {
    return topic @* {
        .last_modified &lt; timestamp,
        .removed == false
    }(
        .id,
        author=.author.display_name,
        .title,
        .message,
        -sort .last_modified,
        .removed,
        .timestamp
    ) limit page_size;
}

query get_topic_replies_prior_to_timestamp(topic_id: text, timestamp, page_size: integer) {
    return topic_reply@*{
        topic@{ .id == topic_id },
        .timestamp &lt; timestamp,
        .is_sub_reply == false
    }(
        .id,
        topic_id = .topic.id,
        author=.author.display_name,
        .message,
        .is_sub_reply,
        .removed,
        -sort .timestamp
    ) limit page_size;
}

query get_topic_replies_after_timestamp(topic_id: text, timestamp, page_size: integer) {
    return topic_reply@*{
        topic@{ .id == topic_id },
        .timestamp &gt; timestamp,
        .is_sub_reply == false
    }(
        .id,
        topic_id = .topic.id,
        author=.author.display_name,
        .message,
        .is_sub_reply,
        .removed,
        -sort .timestamp
    ) limit page_size;
}

query get_topic_replies_by_user_prior_to_timestamp(name, timestamp, page_size: integer) {
    return topic_reply@*{ .author.name == name, .timestamp &lt; timestamp } (
        .id,
        topic_id = .topic.id,
        author=.author.display_name,
        .message,
        .is_sub_reply,
        .removed,
        -sort .timestamp
    ) limit page_size;
}

query count_topics_by_user(name): integer {
    return topic@*{ .author.name == name }( .id ).size();
}

query count_replies_by_user(name): integer {
    return topic_reply@*{ .author.name == name }( .id ).size();
}

query get_sub_replies(parent_reply_id: text) {
    return sub_reply@*{ .parent_reply.id == parent_reply_id } (
        id=.child_reply.id,
        author=.child_reply.author.display_name,
        message=.child_reply.message,
        is_sub_reply=.child_reply.is_sub_reply,
        removed = .child_reply.removed,
        sort timestamp=.child_reply.timestamp
    );
}

query get_topics_by_user_id_prior_to_timestamp(name, timestamp, page_size: integer) {
    return topic@*{
        user.user@{ .name == name },
        .last_modified &lt; timestamp
    }(
        .id,
        author=.author.display_name,
        .title,
        .message,
        -sort .last_modified,
        .removed,
        .timestamp
    ) limit page_size;
}

query get_topics_from_follows_after_timestamp(name, timestamp, page_size: integer) {
    return (topic, follow.follow) @* {
            follow.follower.name == name.lower_case(),
            follow.follows == topic.author,
            topic.last_modified &gt; timestamp,
            topic.removed == false
    }(
        topic.id,
        author=topic.author.display_name,
        topic.title,
        topic.message,
        topic.removed,
        -sort topic.last_modified,
        topic.timestamp
    ) limit page_size;
}

query get_topics_from_follows_prior_to_timestamp(name, timestamp, page_size: integer) {
    return (topic, follow.follow) @* {
        follow.follower.name == name.lower_case(),
        follow.follows == topic.author,
        topic.last_modified &lt; timestamp,
        topic.removed == false
    }(
        topic.id,
        author=topic.author.display_name,
        topic.title,
        topic.message,
        topic.removed,
        -sort topic.last_modified,
        topic.timestamp
    ) limit page_size;
}

query get_topic_by_id(id: text) {
    return topic@{
        .id == id
    }(
        .id,
        author=.author.display_name,
        .title,
        .message,
        .removed,
        -sort .last_modified,
        .timestamp
    );
}

query get_all_topics_by_stars_since_timestamp(timestamp, page_size: integer) {
    return rating.tmp_topic_rating@*{
        .topic.last_modified &gt; timestamp,
        .topic.removed == false
    } (
        -sort .stars,
        id = .topic.id,
        author=.topic.author.display_name,
        title=.topic.title,
        message=.topic.message,
        last_modified=.topic.last_modified,
        timestamp=.topic.timestamp,
        removed=.topic.removed
    ) limit page_size;
}

query get_topics_by_follows_and_stars_since_timestamp(name, timestamp, page_size: integer) {
    return (rating.tmp_topic_rating, follow.follow) @*{
            follow.follower.name == name,
            tmp_topic_rating.topic.author == follow.follows,
            tmp_topic_rating.topic.last_modified &gt; timestamp,
            tmp_topic_rating.topic.removed == false
        } (
        -sort tmp_topic_rating.stars,
        id = tmp_topic_rating.topic.id,
        author=tmp_topic_rating.topic.author.display_name,
        title=tmp_topic_rating.topic.title,
        message=tmp_topic_rating.topic.message,
        last_modified=tmp_topic_rating.topic.last_modified,
        timestamp=tmp_topic_rating.topic.timestamp,
        removed=tmp_topic_rating.topic.removed
    ) limit page_size;
}

query get_topics_by_channel_after_timestamp_sorted_by_popularity(name, timestamp, page_size: integer) {
    return (rating.tmp_topic_rating, channel.channel)@*{
        name == channel.name,
        tmp_topic_rating.topic == channel.topic,
        tmp_topic_rating.topic.last_modified &gt; timestamp,
        tmp_topic_rating.topic.removed == false
    } (
        -sort .stars,
        id = channel.topic.id,
        author=channel.topic.author.display_name,
        title=channel.topic.title,
        message=channel.topic.message,
        last_modified=channel.topic.last_modified,
        timestamp=channel.topic.timestamp,
        removed=channel.topic.removed
    ) limit page_size;
}

query get_topics_by_followed_channels_after_timestamp_sorted_by_popularity(name, timestamp, page_size: integer) {
    return (rating.tmp_topic_rating, channel.channel_following, channel.channel)@*{
        channel_following.user == user.user@{ name },
        channel_following.name == channel.name,
        tmp_topic_rating.topic == channel.topic,
        tmp_topic_rating.topic.last_modified &gt; timestamp,
        tmp_topic_rating.topic.removed == false
    } (
        -sort .stars,
        id = channel.topic.id,
        author=channel.topic.author.display_name,
        title=channel.topic.title,
        message=channel.topic.message,
        last_modified=channel.topic.last_modified,
        timestamp=channel.topic.timestamp,
        removed=channel.topic.removed
    ) limit page_size;
}</string>
                            </entry>
                            <entry key="topic/rating/index.rell">
                                <string>import user;
import topic;

entity topic_star_rating {
    key topic.topic, user.user;
}

// To be deleted when GROUP BY and COUNT is supported, then will use topic_star_rating instead
entity tmp_topic_rating {
    key topic.topic;
    mutable stars: integer;
    index stars;
}

entity reply_star_rating {
    key topic.topic_reply, user.user;
}
</string>
                            </entry>
                            <entry key="topic/rating/operations.rell">
                                <string>import user;
import topic;

operation give_topic_star_rating(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val user = user.get_verified_user(username, descriptor_id);
    create topic_star_rating(topic.topic@{ .id == id }, user);

    val topicRating = tmp_topic_rating@{ topic.topic@{ .id == id }};
    update topicRating ( stars = topicRating.stars + 1 );
}

operation remove_topic_star_rating(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val user = user.get_verified_user(username, descriptor_id);
    delete topic_star_rating@{ topic.topic@{ .id == id }, user };

    val topicRating = tmp_topic_rating@{ topic.topic@{ .id == id }};
    update topicRating ( stars = topicRating.stars - 1 );
}

operation give_reply_star_rating(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val user = user.get_verified_user(username, descriptor_id);
    create reply_star_rating(topic.topic_reply@{ .id == id }, user);
}

operation remove_reply_star_rating(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val user = user.get_verified_user(username, descriptor_id);
    delete reply_star_rating@{ topic.topic_reply@{ .id == id }, user };
}</string>
                            </entry>
                            <entry key="topic/rating/queries.rell">
                                <string>import topic;

query get_star_rating_for_topic(id: text) {
    return topic_star_rating@*{ topic.topic@{ .id == id }} ( .user.name );
}

query get_star_rating_for_reply(id: text) {
    return reply_star_rating@*{ topic.topic_reply@{ .id == id }} ( .user.name );
}

query count_user_topic_star_rating(name): integer {
    return topic_star_rating@*{ .topic.author.name == name } ( .topic, .user ).size();
}

query count_user_reply_star_rating(name): integer {
    return reply_star_rating@*{ .topic_reply.author.name == name } ( .topic_reply, .user ).size();
}</string>
                            </entry>
                            <entry key="topic/subscription/index.rell">
                                <string>import user;
import topic;

entity subscription {
    key topic.topic, user.user;
}
</string>
                            </entry>
                            <entry key="topic/subscription/operations.rell">
                                <string>import user;
import topic;

operation subscribe_to_topic(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val user = user.get_verified_user(username, descriptor_id);
    create subscription(topic.topic@{ .id == id }, user);
}

operation unsubscribe_from_topic(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val user = user.get_verified_user(username, descriptor_id);
    delete subscription@{ topic.topic@{ .id == id }, user };
}</string>
                            </entry>
                            <entry key="topic/subscription/queries.rell">
                                <string>import topic;

query get_subscribers_for_topic(id: text) {
    return subscription@*{ topic.topic@{ .id == id }} ( .user.name );
}</string>
                            </entry>
                            <entry key="user/functions.rell">
                                <string>import ft3_acc: lib.ft3.account;
import user.meta;
import util;

function get_verified_user(name, descriptor_id: byte_array): user {
    val user = user@{ .name == name.lower_case() };
    ft3_acc.require_auth(user.account, descriptor_id, ["A"]);
    require(
    	meta.user_meta@{ user }.suspended_until &lt; op_context.last_block_time,
    	util.app_error(util.error_type.USER_SUSPENDED, "Get verified user")
    );

    return user;
}

function assert_admin(user) {
	require(admin@?{ user }, util.app_error(util.error_type.USER_UNAUTHORIZED, "Assert admin"));
}
</string>
                            </entry>
                            <entry key="user/index.rell">
                                <string>import ft3_acc: lib.ft3.account;

entity admin {
    user;
}

entity user {
    key ft3_acc.account, name;
    display_name: name;
}

import user.settings;
import user.meta;
import user.mute;
</string>
                            </entry>
                            <entry key="user/meta/index.rell">
                                <string>import user;

entity user_meta {
    key user.user;
    mutable times_suspended: integer;
    mutable suspended_until: timestamp;
}
</string>
                            </entry>
                            <entry key="user/meta/operations.rell">
                                <string></string>
                            </entry>
                            <entry key="user/meta/queries.rell">
                                <string>import user;

query get_user_meta(name) {
    return user_meta@{ user.user@{ name }} (
        name = .user.name,
        times_suspended = .times_suspended,
        suspended_until = .suspended_until
    );
}</string>
                            </entry>
                            <entry key="user/mute/index.rell">
                                <string>import user;

entity user_mute {
    key user.user, muted_user: user.user;
}
</string>
                            </entry>
                            <entry key="user/mute/operations.rell">
                                <string>import user;

operation toggle_mute(username: name, descriptor_id: byte_array, name, muted: boolean) {
    val user = user.get_verified_user(username, descriptor_id);

    if (muted) {
        create user_mute(user = user, muted_user = user.user@{ .name == name });
    } else {
        delete user_mute@{ .user == user, .muted_user == user.user@{ .name == name }};
    }
}
</string>
                            </entry>
                            <entry key="user/mute/queries.rell">
                                <string>query get_muted_users(username: name) {
    return user_mute@*{ .user.name == username } ( .muted_user.name );
}</string>
                            </entry>
                            <entry key="user/operations.rell">
                                <string>import ft3_acc: lib.ft3.account;

import user.settings;
import user.meta;

operation register_user(name, ft3_acc.auth_descriptor, vault_auth_descriptor: ft3_acc.auth_descriptor) {
    val account_id = x''; //FIXME ft3_acc.create_account_with_auth(ft3_acc.auth_descriptor);
    val account = ft3_acc.account @ { account_id };
    ft3_acc._add_auth_descriptor(account, vault_auth_descriptor);

    if (name == "admin") {
        val admin = create user(name = name.lower_case(), display_name = name, account);
        create admin(admin);
        create settings.user_settings(admin, avatar = "" , description = "");
        create meta.user_meta(admin, times_suspended = 0, suspended_until = 0);
    } else {
        val user = create user(name = name.lower_case(), display_name = name, account);
        create settings.user_settings(user, avatar = "" , description = "");
        create meta.user_meta(user, times_suspended = 0, suspended_until = 0);
    }
}
</string>
                            </entry>
                            <entry key="user/queries.rell">
                                <string>query get_user(name) {
    return user@?{ .name == name.lower_case() } ( name = .display_name );
}

query get_account_id(name) {
    return user@?{ .name == name.lower_case() } ( .account.id );
}</string>
                            </entry>
                            <entry key="user/settings/index.rell">
                                <string>import user;

entity user_settings {
    key user.user;
    mutable avatar: text;
    mutable description: text;
}
</string>
                            </entry>
                            <entry key="user/settings/operations.rell">
                                <string>import user;

operation create_user_settings(name, descriptor_id: byte_array, avatar: text, description: text) {
    val user = user.get_verified_user(name, descriptor_id);
    create user_settings(user, avatar = avatar, description = description);
}

operation update_user_settings(name, descriptor_id: byte_array, avatar: text, description: text) {
    val user = user.get_verified_user(name, descriptor_id);
    update user_settings@{ .user == user }( avatar = avatar, description = description );
}
</string>
                            </entry>
                            <entry key="user/settings/queries.rell">
                                <string>import user;

query get_user_settings(name) {
    return user_settings@?{ user.user@{ .name == name }} ( .avatar, .description );
}
</string>
                            </entry>
                            <entry key="util/log.rell">
                                <string>enum error_type {
	USER_UNAUTHORIZED,
	USER_SUSPENDED,
	TOPIC_IMMUTABLE,
	REPRESENTATIVE_ALREADY_SUSPENDED,
	ILLEGAL_ACTION
}

function app_error(error_type, action: text): text {
	val msg = when(error_type) {
		USER_UNAUTHORIZED -&gt; message_with_code("CERR_10", "Requester was unauthorized", action);
		USER_SUSPENDED -&gt; message_with_code("CERR_11", "Requester was suspended", action);
		TOPIC_IMMUTABLE -&gt; message_with_code("CERR_20", "Topic is no longer mutable", action);
		REPRESENTATIVE_ALREADY_SUSPENDED -&gt; message_with_code("CERR_30", "User was already suspended", action);
		ILLEGAL_ACTION -&gt; message_with_code("CERR_40", "The attempted action was illegal", action);
	};
	
	log(msg);
	return msg;
}

function message_with_code(code: text, message: text, action: text): text {
	return '{"code":"' + code + '","message":"' + message + '","action":"' + action + '"}';
}</string>
                            </entry>
                        </dict>
                    </entry>
                </dict>
            </entry>
        </dict>
    </entry>
    <entry key="signers">
        <array>
            <bytea>0350FE40766BC0CE8D08B3F5B810E49A8352FDD458606BD5FAFE5ACDCDC8FF3F57</bytea>
        </array>
    </entry>
</dict>
