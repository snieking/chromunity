import user;
import util;
import representative;

operation process_election() {
	var something_done = false;
	
	val current_block = op_context.block_height;
	val election_period_in_blocks = election_duration_in_blocks();
	val governing_period_in_blocks = governing_period_in_blocks();
	
	val election_block_details = election_block_details@?{} ( @sort_desc .started_height, .finished_height ) limit 1;
	
	if (election_block_details == null) {
		log("No election held yet, triggering new one");
		create_election_at_height(current_block);
		something_done = true;
	} else if (election_block_details.finished_height >= 0 and election_block_details.finished_height + governing_period_in_blocks < current_block) {
		log("Triggering a new election");
		create_election_at_height(current_block);
		something_done = true;
	} else if (election_block_details.finished_height == -1 
		and election_block_details.started_height + election_period_in_blocks < current_block
	) {
		log("Wrapping up election");
		complete_election();
		something_done = true;
	}
	
	require(something_done, util.app_error(util.error_type.EXPECTED_ERROR, "Nothing done while processing of elections"));
}

function create_election_at_height(height: integer) {
	val election = create representative_election(
			id = height,
			timestamp = op_context.last_block_time, 
			false
		);
		create election_block_details(started_height = height, election);
}

function complete_election() {
	val current_election_id = require(get_current_election_id(), util.app_error(util.error_type.ILLEGAL_ACTION, "No on-going election"));
	
    val current_election = representative_election@{ .id == current_election_id };
    update current_election ( completed = true );
    update election_block_details@{ current_election } ( finished_height = op_context.block_height );
    
    val nr_of_participants = temp_votes_counter@*{
    	.representative_election_candidate.representative_election == current_election
    } ( 
    	.representative_election_candidate.user.name
    ).size();
    
    val new_representatives = temp_votes_counter@*{ 
    	.representative_election_candidate.representative_election == current_election
    } (
    	@sort_desc @omit .votes,
    	.representative_election_candidate.user
    ) limit integer((nr_of_participants * 0.1).ceil());

    for (user in new_representatives) {
        create representative.representative(user, current_election);
    }
}

operation vote_for_candidate(voter: name, descriptor_id: byte_array, candidate: name) {
	require(voter != candidate, util.app_error(util.error_type.ILLEGAL_ACTION, "You can't vote for yourself"));
    val user = user.get_and_charge_verified_user(voter, descriptor_id);

	require(is_eligible_to_vote(user), util.app_error(util.error_type.ILLEGAL_ACTION, "Not eligible for voting in the election"));

    val current_election_id = require(get_current_election_id(), util.app_error(util.error_type.ILLEGAL_ACTION, "No on-going election"));
    
    clean_up_votes(user, current_election_id);
    
    val vote = create representative_election_vote(
        user,
        representative_election_candidate@{ 
        	user.user@{ .name == candidate }, 
        	.representative_election.id == current_election_id
        }
    );
    
    update temp_votes_counter@ {
    	vote.representative_election_candidate
    } ( votes += 1 );
}

operation sign_up_for_election(name, descriptor_id: byte_array) {
    val user = user.get_and_charge_verified_user(name, descriptor_id);
	val election_id = require(get_current_election_id(), util.app_error(util.error_type.ILLEGAL_ACTION, "No on-going election"));

    val candidate = create representative_election_candidate(
    	representative_election@{ .id == election_id }, 
    	user
    );
    
    create temp_votes_counter(candidate, 0);
}

function clean_up_votes(user.user, id: integer) {
	val old_candidate_votes = representative_election_vote@*{ 
    	user,
    	.representative_election_candidate.representative_election.id == id
    };
	for (old_candidate_vote in old_candidate_votes) {
	    
	    update temp_votes_counter@ {
	    	old_candidate_vote.representative_election_candidate
	    } ( votes -= 1 );
	    
	   	delete old_candidate_vote;
	}
}