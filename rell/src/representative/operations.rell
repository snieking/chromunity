import election;
import topic;
import user;
import util;

operation remove_topic(username: text, descriptor_id: byte_array, topic_id: text) {
    val user = user.get_and_charge_verified_user(username, descriptor_id);

    val recent_election = election.representative_election@{ .completed == true } ( .id, @sort_desc .timestamp ) limit 1;
    val representative = representative @{ user, .representative_election.id == recent_election.id };

    val the_topic = topic.topic @{ .id == topic_id };
    
    create topic.topic_moderation(representative.user, the_topic);

    create representative_action(
        id = op_context.transaction.tx_rid,
        representative,
        op_context.last_block_time,
        action = "A topic from @" + the_topic.author.display_name + " was removed by @" + user.display_name
    );
}

operation remove_topic_reply(username: text, descriptor_id: byte_array, topic_reply_id: text) {
    val user = user.get_and_charge_verified_user(username, descriptor_id);

    val recent_election_id = require(election.get_latest_completed_election_id(), "No election has been held yet");
    val representative = representative @{ user, .representative_election.id == recent_election_id };

    val the_reply = topic.topic_reply @{ .id == topic_reply_id };
    
    create topic.topic_reply_moderation(representative.user, the_reply);

    create representative_action(
        id = op_context.transaction.tx_rid,
        representative,
        op_context.last_block_time,
        action = "Reply from @" + the_reply.author.display_name 
               + " in topic /t/" + the_reply.topic.id + " was removed by @" + user.display_name
    );
}

operation suspend_user(username: text, descriptor_id: byte_array, user_to_be_suspended: text) {
    val user = user.get_and_charge_verified_user(username, descriptor_id);

    val recent_election_id = require(election.get_latest_completed_election_id(), "No election has been held yet");
    val representative = representative @{ user, .representative_election.id == recent_election_id };

    val suspendee = user.user@{ .name == user_to_be_suspended };
    
    val action_id = "suspend_user:" + user_to_be_suspended;
	
	require(
		not is_user_suspended(user, suspendee, op_context.last_block_time), 
		"User already suspended"
	);
	
    val updated_times_suspended = user.user_suspension@*{
    	.user == suspendee,
    	.suspended_by == user
    }( .user ).size() + 1;
    
    val one_day_millis = 86400000;
    val days_suspended = updated_times_suspended * updated_times_suspended;
    val suspension_time_millis = days_suspended * one_day_millis;
	val suspended_until = op_context.last_block_time + suspension_time_millis;

	create user.user_suspension(user = suspendee, suspended_by = user, suspended_until);

    var daysString = " days ";
    if (days_suspended == 1) {
        daysString = " day ";
    }

    create representative_action(
        id = op_context.transaction.tx_rid,
        representative,
        op_context.last_block_time,
        action = "@" + suspendee.display_name + " was suspended for " + days_suspended + daysString +  "by @" + user.display_name
    );
}

operation distrust_representative(name, descriptor_id: byte_array, distrusted: name) {
	val user = user.get_and_charge_verified_user(name, descriptor_id);
	
	val recent_election_id = require(election.get_latest_completed_election_id(), "No election has been held yet");
	
	require(is_eligible_to_distrust(user, recent_election_id), "User is not eligible to distrust");
	
    val representative = representative @{ 
    	.user.name == distrusted.lower_case(), 
    	.representative_election.id == recent_election_id
    };
    
    val required_votes = election.temp_votes_counter@{
    	.representative_election_candidate.representative_election.id == recent_election_id
    } ( @sort_desc .votes ) limit 1;
    
    val distrusts = representative_distrust@*{ 
    	representative
    }( .distruster ).size();
    
    if (distrusts >= 10 and distrusts > required_votes) {
    	delete representative;
    } else {
    	create representative_distrust(user, representative);
    }
}

function is_eligible_to_distrust(user.user, prev_election_id: integer): boolean {	
	val recent_election_start = election.election_block_details@{
		.representative_election.id == prev_election_id
	} ( .started_height );
	
	if (user.registered > recent_election_start) {
		log("User must have registered before the previous election started");
		return false;
	}
	
	val previous_election_completed = (election: election.representative_election, details: election.election_block_details)@?{
		election.id != prev_election_id,
		election == details.representative_election,
		election.completed == true
	} ( 
		details.finished_height,
		@omit @sort_desc election.timestamp
	) limit 1;
	
	if (previous_election_completed == null) {
		return true;
	}
	
	val number_of_topics = topic.topic@*{ 
		.author == user,
		.last_modified > previous_election_completed,
		.last_modified < recent_election_start
	}( .id ).size();
	
	val number_of_replies = topic.topic_reply@*{
		.author == user,
		.timestamp > previous_election_completed,
		.timestamp < recent_election_start
	}( .id ).size();
	
	return number_of_topics + number_of_replies >= 5;
}