import election;

query get_representatives(): list<name> {
    val election = election.representative_election@?{ .completed == true } ( .id, @sort_desc .timestamp ) limit 1;

    if (election == null) {
        return list<name>();
    }

    return representative@*{
        .representative_election.id == election.id
    } ( .user.name );
}

query get_all_representative_actions(timestamp, page_size: integer) {
    return representative_action@*{
        .timestamp < timestamp
    } (
        .id,
        representative = .representative.user.name,
        @sort_desc .timestamp,
        .action
    ) limit page_size;
}

query get_number_of_times_representative(name) {
    return representative@*{ .user.name == name } ( .representative_election.id ).size();
}

query is_rep_distrusted_by_me(me: name, rep: name) {
    val recent_election = election.representative_election@{ .completed == true } ( .id, @sort_desc .timestamp ) limit 1;

	return representative_distrust@?{
		.distruster.user.name == me,
		.distrusted.user.name == rep,
		.distrusted.representative_election.id == recent_election.id
	} != null;
}

query times_user_was_distrusted(name): integer {
	return representative_distrust@*{ .distrusted.user.name == name } ( .distruster.user ).size();
}

query times_user_distrusted_someone(name): integer {
	return representative_distrust@*{ .distruster.user.name == name } ( .distrusted.user ).size();
}