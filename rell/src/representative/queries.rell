import election;
import user;

query get_representatives(): list<name> {
    val election = election.representative_election@?{ .completed == true } ( .id, @sort_desc .timestamp ) limit 1;

    if (election == null) {
        return list<name>();
    }

    return representative@*{
        .representative_election.id == election.id
    } ( .user.display_name );
}

query get_all_representative_actions(timestamp, page_size: integer) {
    return representative_action@*{
        .timestamp < timestamp
    } (
        .id,
        representative = .representative.user.name,
        @sort_desc .timestamp,
        .action
    ) limit page_size;
}

query get_number_of_times_representative(name) {
    return representative@*{ .user.name == name.lower_case() } ( .representative_election.id ).size();
}

query is_user_suspended_by_me(username: name, user_to_be_suspended: name, timestamp) {
	val user = user.user@{ .name == username.lower_case() };
	val suspendee = user.user@{ .name == user_to_be_suspended.lower_case() };
	return is_user_suspended(user, suspendee, timestamp);
}