import user;
import topic;

query get_topics_by_channel_prior_to_timestamp(name, timestamp, page_size: integer) {
    val topics = channel@*{
        .name == name,
        .topic.last_modified < timestamp,
        .topic.removed == false
    } (
        id = .topic.id,
        author = .topic.author.display_name,
        title = .topic.title,
        message = .topic.message,
        timestamp = .topic.timestamp,
        @sort_desc last_modified = .topic.last_modified,
        removed=.topic.removed
    ) limit page_size;
    
    val ext_topics = list<topic.ext_topic>();
    for (t in topics) {
    	val ext_t = topic.ext_topic (
			id = t.id,
			author = t.author,
			title = t.title,
			message = t.message,
			timestamp = t.timestamp,
			last_modified = t.last_modified,
			removed = t.removed,
			latest_poster = topic.get_latest_poster_in_topic(t.id, t.author)
		);
    	ext_topics.add(ext_t);
    }
    
    return ext_topics;
}

query get_topics_by_channel_after_timestamp(name, timestamp) {
    val topics = channel@*{
        .name == name,
        .topic.last_modified > timestamp,
        .topic.removed == false
    } (
        id = .topic.id,
        author = .topic.author.display_name,
        title = .topic.title,
        message = .topic.message,
        timestamp = .topic.timestamp,
        @sort_desc last_modified = .topic.last_modified,
        removed=.topic.removed
    );
    
    val ext_topics = list<topic.ext_topic>();
    for (t in topics) {
    	val ext_t = topic.ext_topic (
			id = t.id,
			author = t.author,
			title = t.title,
			message = t.message,
			timestamp = t.timestamp,
			last_modified = t.last_modified,
			removed = t.removed,
			latest_poster = topic.get_latest_poster_in_topic(t.id, t.author)
		);
    	ext_topics.add(ext_t);
    }
    
    return ext_topics;
}

query count_topics_by_channel(name) {
    return channel@*{ .name == name } ( .name ).size();
}

query count_channel_followers(name) {
    return channel_following@*{ .name == name } ( .user.name ).size();
}

query get_topics_by_followed_channels_prior_to_timestamp(username: text, timestamp, page_size: integer) {
    val user = user.user@{ .name == username};
    val topics = (channel, channel_following)@*{
        channel_following.user == user,
        channel_following.name == channel.name,
        channel.topic.last_modified < timestamp,
        channel.topic.removed == false
    }
    (
        id = channel.topic.id,
        author = channel.topic.author.display_name,
        title = channel.topic.title,
        message = channel.topic.message,
        timestamp = channel.topic.timestamp,
        @sort_desc last_modified = channel.topic.last_modified,
        removed = channel.topic.removed
    ) limit page_size;
    
    val ext_topics = list<topic.ext_topic>();
    for (t in topics) {
    	val ext_t = topic.ext_topic (
			id = t.id,
			author = t.author,
			title = t.title,
			message = t.message,
			timestamp = t.timestamp,
			last_modified = t.last_modified,
			removed = t.removed,
			latest_poster = topic.get_latest_poster_in_topic(t.id, t.author)
		);
    	ext_topics.add(ext_t);
    }
    
    return ext_topics;
}

query get_topics_by_followed_channels_after_timestamp(username: text, timestamp, page_size: integer) {
    val user = user.user@{ .name == username};
    val topics = (channel, channel_following)@*{
        channel_following.user == user,
        channel_following.name == channel.name,
        channel.topic.last_modified > timestamp,
        channel.topic.removed == false
    }
    (
        id = channel.topic.id,
        author = channel.topic.author.display_name,
        title = channel.topic.title,
        message = channel.topic.message,
        timestamp = channel.topic.timestamp,
        @sort_desc last_modified = channel.topic.last_modified,
        removed = channel.topic.removed
    ) limit page_size;
    
    val ext_topics = list<topic.ext_topic>();
    for (t in topics) {
    	val ext_t = topic.ext_topic (
			id = t.id,
			author = t.author,
			title = t.title,
			message = t.message,
			timestamp = t.timestamp,
			last_modified = t.last_modified,
			removed = t.removed,
			latest_poster = topic.get_latest_poster_in_topic(t.id, t.author)
		);
    	ext_topics.add(ext_t);
    }
    
    return ext_topics;
}

query get_followed_channels(username: text) {
    val user = user.user@{ .name == username};
    return channel_following@*{ user } ( .name );
}

query get_all_channels() {
    return channel@*{} ( .display_name );
}

query get_channels_since(timestamp) {
    return channel@*{ .timestamp > timestamp }( .display_name );
}

query get_topic_channels_belongings(topic_id: text) {
    return channel@*{ topic.topic@{ .id == topic_id }} ( .display_name );
}
