import channel;
import follow;
import topic.rating;
import user;
import representative;

query get_topics_after_timestamp(timestamp, page_size: integer) {
    val topics = topic@*{
        .last_modified > timestamp,
        .removed == false
    }(
        .id,
        author=.author.display_name,
        .title,
        .message,
        @sort_desc .last_modified,
        .removed,
        .timestamp
    ) limit page_size;
    
    val ext_topics = list<ext_topic>();
    
    for (topic in topics) {
    	val ext_topic = ext_topic (
			id = topic.id,
			author = topic.author,
			title = topic.title,
			message = topic.message,
			timestamp = topic.timestamp,
			last_modified = topic.last_modified,
			removed = topic.removed,
			latest_poster = get_latest_poster_in_topic(topic.id, topic.author)
		);
    	ext_topics.add(ext_topic);
    }
    
    return ext_topics;
}

query get_topics_prior_to_timestamp(timestamp, page_size: integer): list<ext_topic> {
    val topics = topic@*{
        .last_modified < timestamp,
        .removed == false
    }(
        .id,
        author = .author.display_name,
        .title,
        .message,
        @sort_desc .last_modified,
        .removed,
        .timestamp
    ) limit page_size;
        
    val ext_topics = list<ext_topic>();
    for (topic in topics) {
    	val ext_topic = ext_topic (
			id = topic.id,
			author = topic.author,
			title = topic.title,
			message = topic.message,
			timestamp = topic.timestamp,
			last_modified = topic.last_modified,
			removed = topic.removed,
			latest_poster = get_latest_poster_in_topic(topic.id, topic.author)
		);
    	ext_topics.add(ext_topic);
    }
    
    return ext_topics;
}

query get_topic_replies_prior_to_timestamp(username: name, topic_id: text, timestamp, page_size: integer) {
	val is_rep = representative.is_username_representative(username);
	
	if (is_rep) {
		
		return topic_reply@*{
	        topic@{ .id == topic_id },
	        .timestamp < timestamp,
	        .is_sub_reply == false
	    }(
	        .id,
	        topic_id = .topic.id,
	        author= .author.display_name,
	        .message,
	        .overridden_original,
	        .is_sub_reply,
	        .removed,
	        @sort_desc .timestamp
	    ) limit page_size;
	
	} else {
			
	    return topic_reply@*{
	        topic@{ .id == topic_id },
	        .timestamp < timestamp,
	        .is_sub_reply == false
	    }(
	        .id,
	        topic_id = .topic.id,
	        author= .author.display_name,
	        .message,
	        overridden_original = "",
	        .is_sub_reply,
	        .removed,
	        @sort_desc .timestamp
	    ) limit page_size;
    
    }
}

query count_topic_replies(topic_id: text) {
	return topic_reply@*{ .topic.id == topic_id }( .id ).size();
}

query get_topic_replies_after_timestamp(username: name, topic_id: text, timestamp, page_size: integer) {
	val is_rep = representative.is_username_representative(username);
	
	if (is_rep) {
		
		return topic_reply@*{
	        topic@{ .id == topic_id },
	        .timestamp > timestamp,
	        .is_sub_reply == false
	    }(
	        .id,
	        topic_id = .topic.id,
	        author= .author.display_name,
	        .message,
	        .overridden_original,
	        .is_sub_reply,
	        .removed,
	        @sort_desc .timestamp
	    ) limit page_size;
		
	} else {
		
		return topic_reply@*{
	        topic@{ .id == topic_id },
	        .timestamp > timestamp,
	        .is_sub_reply == false
	    }(
	        .id,
	        topic_id = .topic.id,
	        author= .author.display_name,
	        .message,
	        overridden_original = "",
	        .is_sub_reply,
	        .removed,
	        @sort_desc .timestamp
	    ) limit page_size;
		
	}
	
    
}

query get_topic_replies_by_user_prior_to_timestamp(name, timestamp, page_size: integer) {
    return topic_reply@*{ .author.name == name, .timestamp < timestamp } (
        .id,
        topic_id = .topic.id,
        author=.author.display_name,
        .message,
        .is_sub_reply,
        .removed,
        @sort_desc .timestamp
    ) limit page_size;
}

query count_topics_by_user(name): integer {
    return topic@*{ .author.name == name }( .id ).size();
}

query count_replies_by_user(name): integer {
    return topic_reply@*{ .author.name == name }( .id ).size();
}

query get_sub_replies(username: name, parent_reply_id: text) {
	val is_rep = representative.is_username_representative(username);
	
	if (is_rep) {
		
		return sub_reply@*{ .parent_reply.id == parent_reply_id } (
	        id= .child_reply.id,
	        author= .child_reply.author.display_name,
	        message= .child_reply.message,
	        overridden_original = .child_reply.overridden_original,
	        is_sub_reply= .child_reply.is_sub_reply,
	        removed = .child_reply.removed,
	        @sort timestamp= .child_reply.timestamp
	    );
		
	} else {
	
	    return sub_reply@*{ .parent_reply.id == parent_reply_id } (
	        id= .child_reply.id,
	        author= .child_reply.author.display_name,
	        message= .child_reply.message,
	        overridden_original = "",
	        is_sub_reply= .child_reply.is_sub_reply,
	        removed = .child_reply.removed,
	        @sort timestamp= .child_reply.timestamp
	    );
    
    }
}

query get_topics_by_user_id_prior_to_timestamp(name, timestamp, page_size: integer) {
    val topics = topic@*{
        user.user@{ .name == name },
        .last_modified < timestamp
    }(
        .id,
        author= .author.display_name,
        .title,
        .message,
        @sort_desc .last_modified,
        .removed,
        .timestamp
    ) limit page_size;
    
    val ext_topics = list<ext_topic>();
    for (topic in topics) {
    	val ext_topic = ext_topic (
			id = topic.id,
			author = topic.author,
			title = topic.title,
			message = topic.message,
			timestamp = topic.timestamp,
			last_modified = topic.last_modified,
			removed = topic.removed,
			latest_poster = get_latest_poster_in_topic(topic.id, topic.author)
		);
    	ext_topics.add(ext_topic);
    }
    
    return ext_topics;
}

query get_topics_from_follows_after_timestamp(name, timestamp, page_size: integer) {
    val topics = (topic, follow.follow)@*{
            follow.follower.name == name.lower_case(),
            follow.follows == topic.author,
            topic.last_modified > timestamp,
            topic.removed == false
    }(
        topic.id,
        author=topic.author.display_name,
        topic.title,
        topic.message,
        topic.removed,
        @sort_desc topic.last_modified,
        topic.timestamp
    ) limit page_size;
    
    val ext_topics = list<ext_topic>();
    for (topic in topics) {
    	val ext_topic = ext_topic (
			id = topic.id,
			author = topic.author,
			title = topic.title,
			message = topic.message,
			timestamp = topic.timestamp,
			last_modified = topic.last_modified,
			removed = topic.removed,
			latest_poster = get_latest_poster_in_topic(topic.id, topic.author)
		);
    	ext_topics.add(ext_topic);
    }
    
    return ext_topics;
}

query get_topics_from_follows_prior_to_timestamp(name, timestamp, page_size: integer) {
    val topics = (topic, follow.follow) @* {
        follow.follower.name == name.lower_case(),
        follow.follows == topic.author,
        topic.last_modified < timestamp,
        topic.removed == false
    }(
        topic.id,
        author = topic.author.display_name,
        topic.title,
        topic.message,
        topic.removed,
        @sort_desc topic.last_modified,
        topic.timestamp
    ) limit page_size;
    
    val ext_topics = list<ext_topic>();
    for (topic in topics) {
    	val ext_topic = ext_topic (
			id = topic.id,
			author = topic.author,
			title = topic.title,
			message = topic.message,
			timestamp = topic.timestamp,
			last_modified = topic.last_modified,
			removed = topic.removed,
			latest_poster = get_latest_poster_in_topic(topic.id, topic.author)
		);
    	ext_topics.add(ext_topic);
    }
    
    return ext_topics;
}

query get_topic_by_id(username: name, id: text) {
	val is_rep = representative.is_username_representative(username);
	
	if (is_rep) {
		
		return topic@{ .id == id }(
	        .id,
	        author = .author.display_name,
	        .title,
	        .overridden_original_title,
	        .message,
	        .overridden_original_message,
	        .removed,
	        @sort_desc .last_modified,
	        .timestamp
	    );
		
	} else {
	
	    return topic@{ .id == id }(
	        .id,
	        author = .author.display_name,
	        .title,
	        overridden_original_title = "",
	        .message,
	        overridden_original_message = "",
	        .removed,
	        @sort_desc .last_modified,
	        .timestamp
	    );
	    
    }
}

query get_all_topics_by_stars_since_timestamp(timestamp, page_size: integer) {
    val topics = rating.tmp_topic_rating@*{
        .topic.last_modified > timestamp,
        .topic.removed == false
    } (
        @sort_desc .stars,
        id = .topic.id,
        author=.topic.author.display_name,
        title=.topic.title,
        message=.topic.message,
        last_modified=.topic.last_modified,
        timestamp=.topic.timestamp,
        removed=.topic.removed
    ) limit page_size;
    
    val ext_topics = list<ext_topic>();
    for (topic in topics) {
    	val ext_topic = ext_topic (
			id = topic.id,
			author = topic.author,
			title = topic.title,
			message = topic.message,
			timestamp = topic.timestamp,
			last_modified = topic.last_modified,
			removed = topic.removed,
			latest_poster = get_latest_poster_in_topic(topic.id, topic.author)
		);
    	ext_topics.add(ext_topic);
    }
    
    return ext_topics;
}

query get_topics_by_follows_and_stars_since_timestamp(name, timestamp, page_size: integer) {
    val topics = (rating.tmp_topic_rating, follow.follow) @*{
            follow.follower.name == name,
            tmp_topic_rating.topic.author == follow.follows,
            tmp_topic_rating.topic.last_modified > timestamp,
            tmp_topic_rating.topic.removed == false
        } (
        @sort_desc tmp_topic_rating.stars,
        id = tmp_topic_rating.topic.id,
        author = tmp_topic_rating.topic.author.display_name,
        title = tmp_topic_rating.topic.title,
        message = tmp_topic_rating.topic.message,
        last_modified = tmp_topic_rating.topic.last_modified,
        timestamp = tmp_topic_rating.topic.timestamp,
        removed = tmp_topic_rating.topic.removed
    ) limit page_size;
    
    val ext_topics = list<ext_topic>();
    for (topic in topics) {
    	val ext_topic = ext_topic (
			id = topic.id,
			author = topic.author,
			title = topic.title,
			message = topic.message,
			timestamp = topic.timestamp,
			last_modified = topic.last_modified,
			removed = topic.removed,
			latest_poster = get_latest_poster_in_topic(topic.id, topic.author)
		);
    	ext_topics.add(ext_topic);
    }
    
    return ext_topics;
}

query get_topics_by_channel_after_timestamp_sorted_by_popularity(name, timestamp, page_size: integer) {
    val topics = (rating.tmp_topic_rating, channel.channel)@*{
        name == channel.name,
        tmp_topic_rating.topic == channel.topic,
        tmp_topic_rating.topic.last_modified > timestamp,
        tmp_topic_rating.topic.removed == false
    } (
        @sort_desc .stars,
        id = channel.topic.id,
        author = channel.topic.author.display_name,
        title = channel.topic.title,
        message = channel.topic.message,
        last_modified = channel.topic.last_modified,
        timestamp = channel.topic.timestamp,
        removed = channel.topic.removed
    ) limit page_size;
    
    val ext_topics = list<ext_topic>();
    for (topic in topics) {
    	val ext_topic = ext_topic (
			id = topic.id,
			author = topic.author,
			title = topic.title,
			message = topic.message,
			timestamp = topic.timestamp,
			last_modified = topic.last_modified,
			removed = topic.removed,
			latest_poster = get_latest_poster_in_topic(topic.id, topic.author)
		);
    	ext_topics.add(ext_topic);
    }
    
    return ext_topics;
}

query get_topics_by_followed_channels_after_timestamp_sorted_by_popularity(name, timestamp, page_size: integer) {
    val topics = (rating.tmp_topic_rating, channel.channel_following, channel.channel)@*{
        channel_following.user == user.user@{ name },
        channel_following.name == channel.name,
        tmp_topic_rating.topic == channel.topic,
        tmp_topic_rating.topic.last_modified > timestamp,
        tmp_topic_rating.topic.removed == false
    } (
        @sort_desc .stars,
        id = channel.topic.id,
        author = channel.topic.author.display_name,
        title = channel.topic.title,
        message = channel.topic.message,
        last_modified = channel.topic.last_modified,
        timestamp = channel.topic.timestamp,
        removed = channel.topic.removed
    ) limit page_size;
    
    val ext_topics = list<ext_topic>();
    for (topic in topics) {
    	val ext_topic = ext_topic (
			id = topic.id,
			author = topic.author,
			title = topic.title,
			message = topic.message,
			timestamp = topic.timestamp,
			last_modified = topic.last_modified,
			removed = topic.removed,
			latest_poster = get_latest_poster_in_topic(topic.id, topic.author)
		);
    	ext_topics.add(ext_topic);
    }
    
    return ext_topics;
}