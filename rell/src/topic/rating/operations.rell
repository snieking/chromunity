import user;
import topic;

operation give_topic_star_rating(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val my_user = user.get_and_charge_verified_user(username, descriptor_id);
    val topic = topic.topic@{ .id == id };
    
    create topic_star_rating(topic.topic@{ .id == id }, my_user);
    
    if (my_user.name != topic.author.name) {
        user.reward_asset(topic.author, 2);
    }
}

operation remove_topic_star_rating(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val my_user = user.get_and_charge_verified_user(username, descriptor_id);
    val topic_rating = topic_star_rating@{ topic.topic@{ .id == id }, my_user };
    
    if (my_user.name != topic_rating.topic.author.name) {
        user.deduct_asset(topic_rating.topic.author, 2);
    }
    
    delete topic_rating;
}

operation give_reply_star_rating(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val my_user = user.get_and_charge_verified_user(username, descriptor_id);
    
    val reply = topic.topic_reply@{ .id == id };
    create reply_star_rating(reply, my_user);
    
    if (my_user.name != reply.author.name) {
        user.reward_asset(reply.author, 2);
    }
}

operation remove_reply_star_rating(username: text, descriptor_id: byte_array, id: text, unique_id: text) {
    val my_user = user.get_and_charge_verified_user(username, descriptor_id);
    
    val reply = topic.topic_reply@{ .id == id };
    delete reply_star_rating@{ reply, my_user };
    
    if (my_user.name != reply.author.name) {
        user.deduct_asset(reply.author, 2);
    }
}