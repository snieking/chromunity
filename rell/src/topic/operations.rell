import channel;
import topic.rating;
import user;
import topic.subscription;
import topic.poll;

operation create_topic(id: text, descriptor_id: byte_array, username: text, channel_key: name, channel_name: name, title: name, message: text) {
    val pattern = ".{3,40}";
    require(title.matches(pattern), "Title [" + title + "] is invalid, must match: " + pattern);
    
    val author = user.get_and_charge_verified_user(username, descriptor_id);

    val topic = create topic(
        id = id,
        author,
        timestamp = op_context.last_block_time,
        last_modified = op_context.last_block_time,
        title = title,
        message = message
    );

    create channel.channel(name = channel_key.lower_case(), topic, op_context.last_block_time, display_name = channel_name);
        
    for (suspension in user.user_suspension@*{ .user == author, .suspended_until > op_context.last_block_time }) {
    	create topic_moderation(suspension.suspended_by, topic);
    }
}

operation modify_topic(id: text, descriptor_id: byte_array, username: text, text) {
    val author = user.get_and_charge_verified_user(username, descriptor_id);

    val topic = topic@{ .id == id, .author == author };
    require_mutable(topic.timestamp, op_context.last_block_time, "Modify topic");

    update topic ( message = text );
}

operation delete_topic(id: text, descriptor_id: byte_array, username: text) {
    val author = user.get_and_charge_verified_user(username, descriptor_id);

    val topic = topic@{ .id == id, .author == author };
    require_mutable(topic.timestamp, op_context.last_block_time, "Delete topic");
    delete channel.channel@{ topic };
    delete subscription.subscription@?{ topic };
    
    val opt_poll = poll.poll@?{ topic };
    if (opt_poll != null) {
    	delete poll.poll_option@*{ .poll == opt_poll };
    	delete poll.poll_vote@*{ .poll == opt_poll };
    	delete opt_poll;
    }
    
	delete topic;
}

operation create_reply(topic_id: text, descriptor_id: byte_array, id: text, username: text, message: text) {
    val author = user.get_and_charge_verified_user(username, descriptor_id);
    val topic = find_topic_by_id(topic_id);

    val reply = create topic_reply(
        id = id,
        topic,
        author,
        timestamp = op_context.last_block_time,
        message = message
    );
    
    for (suspension in user.user_suspension@*{ .user == author, .suspended_until > op_context.last_block_time }) {
    	create topic_reply_moderation(suspension.suspended_by, reply);
    }

     update topic ( last_modified = op_context.last_block_time);
}

operation modify_reply(id: text, descriptor_id: byte_array, username: text, text) {
    val author = user.get_and_charge_verified_user(username, descriptor_id);

    val reply = topic_reply@{ .id == id, .author == author };
    require_mutable(reply.timestamp, op_context.last_block_time, "Modify reply");

    update reply ( message = text );
}

operation delete_reply(id: text, descriptor_id: byte_array, username: text) {
	val author = user.get_and_charge_verified_user(username, descriptor_id);
	val reply = topic_reply@{ id, author };
	require_mutable(reply.timestamp, op_context.last_block_time, "Delete reply");
	
	delete sub_reply@?{ .child_reply == reply };
	delete reply;
}

operation create_sub_reply(topic_id: text, descriptor_id: byte_array, parent_reply_id: text, id: text, username: text, message: text) {
    val author = user.get_and_charge_verified_user(username, descriptor_id);
    val topic = find_topic_by_id(topic_id);

    val topic_reply = create topic_reply(
        id = id,
        topic,
        author,
        timestamp = op_context.last_block_time,
        is_sub_reply = true,
        message = message	
    );
    
    for (suspension in user.user_suspension@*{ .user == author, .suspended_until > op_context.last_block_time }) {
    	create topic_reply_moderation(suspension.suspended_by, topic_reply);
    }

    create sub_reply(
        parent_reply = topic_reply@{ .id == parent_reply_id },
        child_reply = topic_reply
    );

    update topic ( last_modified = op_context.last_block_time);
}