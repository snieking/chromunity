import follow;

query get_chat_user_pubkey(username: name): text? {
	return chat_user@?{ .user.name == username.lower_case() } ( .rsa_pubkey );
}

query get_user_chats(username: name): list<chat_record> {

	val member_chats = chat_membership@*{ .member.user.name == username.lower_case() };
	val chat_records = list<chat_record>();

	for (member_chat in member_chats) {
		val latest_message = chat_message@?{ .chat == member_chat.chat } ( .sender, -sort .timestamp, .encrypted_msg, -sort .chat.timestamp ) limit 1;

		if (latest_message != null) {
			val message = message_record(sender = latest_message.sender.user.display_name, timestamp = latest_message.timestamp, encrypted_msg = latest_message.encrypted_msg);
			chat_records.add(chat_record(
				id = member_chat.chat.id,
				title = member_chat.chat.title,
				last_message = message,
				encrypted_chat_key = member_chat.encrypted_chat_key,
				timestamp = member_chat.chat.timestamp,
				last_opened = member_chat.last_opened
			));
		} else {
			chat_records.add(chat_record(
				id = member_chat.chat.id,
				title = member_chat.chat.title,
				last_message = null,
				encrypted_chat_key = member_chat.encrypted_chat_key,
				timestamp = member_chat.chat.timestamp,
				last_opened = member_chat.last_opened
			));
		}

	}

	return chat_records;
}

query get_chat_messages(id: text, prior_to: timestamp, page_size: integer) {
	return chat_message@*{ .chat.id == id, .timestamp < prior_to } (
		sender = chat_message.sender.user.display_name,
		-sort timestamp = chat_message.timestamp,
		encrypted_msg = chat_message.encrypted_msg
	) limit page_size;
}

query get_chat_messages_after(id: text, after_timestamp: timestamp, page_size: integer) {
	return chat_message@*{ .chat.id == id, .timestamp > after_timestamp } (
		sender = chat_message.sender.user.display_name,
		sort timestamp = chat_message.timestamp,
		encrypted_msg = chat_message.encrypted_msg
	) limit page_size;
}

query get_chat_participants(id: text) {
	return chat_membership@*{ .chat.id == id } ( .member.user.display_name );
}

query get_followed_chat_users(username: name) {
	return (chat_user, follow.follow) @* {
		follow.follower.name == username.lower_case(),
		follow.follows == chat_user.user
	} ( chat_user.user.display_name );
}

query get_chat_users() {
	return chat_user @* {} ( chat_user.user.display_name );
}

query count_unread_chats(username: name) {
	return set<chat>((chat_membership, chat_message)@*{
		chat_membership.member.user.name == username,
		chat_message.timestamp > chat_membership.last_opened,
		chat_membership.chat == chat_message.chat
	} ( chat_membership.chat )).size();
}