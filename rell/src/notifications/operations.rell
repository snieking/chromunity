import user;

operation create_notifications_for_users(name, descriptor_id: byte_array, id: text, trigger: text, content: text, usernames: set<text>) {
    val user = user.get_verified_user(name, descriptor_id);

    for (username in usernames) {
        val toUser = user.user@?{ .name == username.lower_case() };
        if (toUser != null) {
            create notification(
                id = id,
                toUser,
                trigger = trigger,
                content = content,
                false,
                op_context.last_block_time
            );
        }
    }
}

operation remove_notifications_for_users(name, descriptor_id: byte_array, id: text, usernames: set<text>) {
    val user = user.get_verified_user(name, descriptor_id);

    for (username in usernames) {
        val to_user = user.user@?{ .name == username };
        if (to_user != null) {
            delete notification@?{ id, .user == to_user };
        }
    }
}

operation mark_notifications_since_timestamp_read(name, descriptor_id: byte_array, timestamp) {
    val user = user.get_verified_user(name, descriptor_id);
    update notification@*{ .user == user, .timestamp > timestamp } ( read = true );
}