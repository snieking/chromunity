@mount('ft3')
module;

import dev_op: ^^.core.dev_op;
import ft3: ^^.core;
import acc: ^^.account;

import xft3: ^^.crosschain; 



operation dev_register_asset (name, issuing_chain_rid: byte_array) {
    dev_op.require_dev();
    ft3.register_asset(name, issuing_chain_rid);
}

operation dev_give_balance (asset_id: byte_array, account_id: byte_array, amount: integer) {
    dev_op.require_dev();
    require(amount >= 0);
    ft3.ensure_balance( acc.account @ { account_id }, ft3.asset @ { .id == asset_id } ).amount += amount;
}

operation dev_register_account (acc.auth_descriptor) {
    dev_op.require_dev();
    acc.create_account_with_auth( auth_descriptor );
}

operation dev_register_xc_asset (name, issuing_chain_rid: byte_array, origin_chain_rid: byte_array) {
    dev_op.require_dev();   
    val asset = ft3.register_asset(name, issuing_chain_rid);
    create xft3.asset_origin (asset, origin_chain_rid);
}

function dev_give_points_(account: acc.account, amount: integer) {
	dev_op.require_dev();
	update acc.rl_state@{account}(.points += amount);
}

/*
 * Can be negative
 */
operation dev_give_points(account_id: byte_array, amount: integer){
	val account = acc.account@{.id == account_id};
	dev_give_points_(account, amount);
}

operation dev_free_op(account_id: byte_array) {
	// this operation does not cost points in the rate limit
	val account = acc.account@{.id == account_id};
	dev_give_points_(account, 1);
	acc.rate_limit(account);
}