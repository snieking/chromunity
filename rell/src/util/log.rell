enum error_type {
	USER_UNAUTHORIZED,
	USER_SUSPENDED,
	TOPIC_IMMUTABLE,
	REPRESENTATIVE_ALREADY_SUSPENDED,
	ILLEGAL_ACTION,
	EXPECTED_ERROR
}

function app_error(error_type, action: text): text {
	val msg = when(error_type) {
		USER_UNAUTHORIZED -> message_with_code("CERR_10", "Requester was unauthorized", action);
		USER_SUSPENDED -> message_with_code("CERR_11", "Requester was suspended", action);
		TOPIC_IMMUTABLE -> message_with_code("CERR_20", "Topic is no longer mutable", action);
		REPRESENTATIVE_ALREADY_SUSPENDED -> message_with_code("CERR_30", "User was already suspended", action);
		ILLEGAL_ACTION -> message_with_code("CERR_40", "The attempted action was illegal", action);
		EXPECTED_ERROR -> message_with_code("CERR_50", "Expected error", action);
	};
	
	log(msg);
	return msg;
}

function message_with_code(code: text, message: text, action: text): text {
	return '{"code":"' + code + '","message":"' + message + '","action":"' + action + '"}';
}